"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_zcl_oapi_parser_clas_mjs"],{

/***/ "../output/zcl_oapi_parser.clas.mjs":
/*!******************************************!*\
  !*** ../output/zcl_oapi_parser.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zcl_oapi_parser\": () => (/* binding */ zcl_oapi_parser)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// zcl_oapi_parser.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nclass zcl_oapi_parser {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mo_json = new abap.types.ABAPObject({qualifiedName: \"ZCL_OAPI_JSON\"});\n    return this;\n  }\n  async parse(INPUT) {\n    let rs_schema = new abap.types.Structure({openapi: new abap.types.String(), info: new abap.types.Structure({title: new abap.types.String(), version: new abap.types.String(), description: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_info\"), servers: new abap.types.Table(new abap.types.Structure({url: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_server\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), operations: new abap.types.Table(new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), components: new abap.types.Structure({schemas: new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), examples: new abap.types.String(), request_bodies: new abap.types.String(), headers: new abap.types.String(), security_schemas: new abap.types.String(), links: new abap.types.String(), callbacks: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_components\")}, \"zif_oapi_specification_v3=>ty_specification\");\n    let iv_json = new abap.types.String();\n    if (INPUT && INPUT.iv_json) {iv_json.set(INPUT.iv_json);}\n    this.mo_json.set(await (new abap.Classes['ZCL_OAPI_JSON']()).constructor_({iv_json: iv_json}));\n    rs_schema.get().openapi.set((await this.mo_json.get().value_string({iv_path: new abap.types.Character({length: 8}).set('/openapi')})));\n    abap.statements.assert(abap.compare.cp(rs_schema.get().openapi, new abap.types.Character({length: 2}).set('3*')));\n    rs_schema.get().info.get().title.set((await this.mo_json.get().value_string({iv_path: new abap.types.Character({length: 11}).set('/info/title')})));\n    rs_schema.get().info.get().version.set((await this.mo_json.get().value_string({iv_path: new abap.types.Character({length: 13}).set('/info/version')})));\n    rs_schema.get().info.get().description.set((await this.mo_json.get().value_string({iv_path: new abap.types.Character({length: 17}).set('/info/description')})));\n    rs_schema.get().operations.set((await this.parse_operations()));\n    rs_schema.get().servers.set((await this.parse_servers()));\n    rs_schema.get().components.set((await this.parse_components()));\n    return rs_schema;\n  }\n  async parse_schema(INPUT) {\n    let ri_schema = new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"});\n    let iv_prefix = new abap.types.String();\n    if (INPUT && INPUT.iv_prefix) {iv_prefix.set(INPUT.iv_prefix);}\n    let lt_names = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let lv_name = new abap.types.String();\n    let ls_property = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), ref: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_schema=>ty_property\");\n    let lo_names = new abap.types.ABAPObject({qualifiedName: \"ZCL_OAPI_ABAP_NAME\"});\n    lo_names.set(await (new abap.Classes['ZCL_OAPI_ABAP_NAME']()).constructor_());\n    ri_schema.set(await (new abap.Classes['ZCL_OAPI_SCHEMA']()).constructor_());\n    ri_schema.get().zif_oapi_schema$type.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,new abap.types.Character({length: 5}).set('/type'))})));\n    if (abap.compare.initial(ri_schema.get().zif_oapi_schema$type)) {\n      ri_schema.get().zif_oapi_schema$type.set(new abap.types.Character({length: 6}).set('string'));\n      return ri_schema;\n    }\n    ri_schema.get().zif_oapi_schema$default_.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,new abap.types.Character({length: 8}).set('/default'))})));\n    ri_schema.get().zif_oapi_schema$items_ref.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,new abap.types.Character({length: 11}).set('/items/$ref'))})));\n    ri_schema.get().zif_oapi_schema$items_type.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,new abap.types.Character({length: 11}).set('/items/type'))})));\n    lt_names.set((await this.mo_json.get().members({iv_path: abap.operators.concat(iv_prefix,new abap.types.Character({length: 12}).set('/properties/'))})));\n    for (const unique1 of abap.statements.loop(lt_names)) {\n      lv_name.set(unique1);\n      abap.statements.clear(ls_property);\n      ls_property.get().name.set(lv_name);\n      ls_property.get().abap_name.set((await lo_names.get().to_abap_name({iv_name: lv_name})));\n      ls_property.get().ref.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,abap.operators.concat(new abap.types.Character({length: 12}).set('/properties/'),abap.operators.concat(lv_name,new abap.types.Character({length: 5}).set('/$ref'))))})));\n      if (abap.compare.initial(ls_property.get().ref)) {\n        ls_property.get().schema.set((await this.parse_schema({iv_prefix: abap.operators.concat(iv_prefix,abap.operators.concat(new abap.types.Character({length: 12}).set('/properties/'),lv_name))})));\n      }\n      abap.statements.append({source: ls_property, target: ri_schema.get().zif_oapi_schema$properties});\n    }\n    return ri_schema;\n  }\n  async parse_components() {\n    let rs_components = new abap.types.Structure({schemas: new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), examples: new abap.types.String(), request_bodies: new abap.types.String(), headers: new abap.types.String(), security_schemas: new abap.types.String(), links: new abap.types.String(), callbacks: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_components\");\n    rs_components.get().parameters.set((await this.parse_parameters({iv_prefix: new abap.types.Character({length: 23}).set('/components/parameters/')})));\n    rs_components.get().schemas.set((await this.parse_schemas({iv_prefix: new abap.types.Character({length: 20}).set('/components/schemas/')})));\n    return rs_components;\n  }\n  async parse_schemas(INPUT) {\n    let rt_schemas = new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    let iv_prefix = new abap.types.String();\n    if (INPUT && INPUT.iv_prefix) {iv_prefix.set(INPUT.iv_prefix);}\n    let lt_names = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let lv_name = new abap.types.String();\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let lo_names = new abap.types.ABAPObject({qualifiedName: \"ZCL_OAPI_ABAP_NAME\"});\n    lo_names.set(await (new abap.Classes['ZCL_OAPI_ABAP_NAME']()).constructor_());\n    lt_names.set((await this.mo_json.get().members({iv_path: iv_prefix})));\n    for (const unique2 of abap.statements.loop(lt_names)) {\n      lv_name.set(unique2);\n      abap.statements.clear(ls_schema);\n      ls_schema.get().name.set(lv_name);\n      ls_schema.get().abap_name.set((await lo_names.get().to_abap_name({iv_name: ls_schema.get().name})));\n      ls_schema.get().abap_parser_method.set((await lo_names.get().to_abap_name({iv_name: new abap.types.String().set(`parse_${ls_schema.get().abap_name.get()}`)})));\n      ls_schema.get().schema.set((await this.parse_schema({iv_prefix: abap.operators.concat(iv_prefix,lv_name)})));\n      abap.statements.append({source: ls_schema, target: rt_schemas});\n    }\n    return rt_schemas;\n  }\n  async parse_servers() {\n    let rt_servers = new abap.types.Table(new abap.types.Structure({url: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_server\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    let lt_array = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let lv_index = new abap.types.String();\n    let ls_server = new abap.types.Structure({url: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_server\");\n    lt_array.set((await this.mo_json.get().members({iv_path: new abap.types.Character({length: 9}).set('/servers/')})));\n    for (const unique3 of abap.statements.loop(lt_array)) {\n      lv_index.set(unique3);\n      abap.statements.clear(ls_server);\n      ls_server.get().url.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(new abap.types.Character({length: 9}).set('/servers/'),abap.operators.concat(lv_index,new abap.types.Character({length: 4}).set('/url')))})));\n      abap.statements.append({source: ls_server, target: rt_servers});\n    }\n    return rt_servers;\n  }\n  async parse_operations() {\n    let rt_operations = new abap.types.Table(new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    let lt_paths = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let lv_path = new abap.types.String();\n    let lt_methods = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let lv_method = new abap.types.String();\n    let lv_prefix = new abap.types.String();\n    let ls_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    let lo_names = new abap.types.ABAPObject({qualifiedName: \"ZCL_OAPI_ABAP_NAME\"});\n    lo_names.set(await (new abap.Classes['ZCL_OAPI_ABAP_NAME']()).constructor_());\n    lt_paths.set((await this.mo_json.get().members({iv_path: new abap.types.Character({length: 7}).set('/paths/')})));\n    for (const unique4 of abap.statements.loop(lt_paths)) {\n      lv_path.set(unique4);\n      abap.statements.clear(ls_operation);\n      ls_operation.get().path.set(lv_path);\n      lt_methods.set((await this.mo_json.get().members({iv_path: abap.operators.concat(new abap.types.Character({length: 7}).set('/paths/'),abap.operators.concat(lv_path,new abap.types.Character({length: 1}).set('/')))})));\n      for (const unique5 of abap.statements.loop(lt_methods)) {\n        lv_method.set(unique5);\n        ls_operation.get().method.set(lv_method);\n        lv_prefix.set(abap.operators.concat(new abap.types.Character({length: 7}).set('/paths/'),abap.operators.concat(lv_path,abap.operators.concat(new abap.types.Character({length: 1}).set('/'),lv_method))));\n        ls_operation.get().summary.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(lv_prefix,new abap.types.Character({length: 8}).set('/summary'))})));\n        ls_operation.get().deprecated.set((await this.mo_json.get().value_boolean({iv_path: abap.operators.concat(lv_prefix,new abap.types.Character({length: 11}).set('/deprecated'))})));\n        ls_operation.get().description.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(lv_prefix,new abap.types.Character({length: 12}).set('/description'))})));\n        ls_operation.get().operation_id.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(lv_prefix,new abap.types.Character({length: 12}).set('/operationId'))})));\n        ls_operation.get().parameters.set((await this.parse_parameters({iv_prefix: abap.operators.concat(lv_prefix,new abap.types.Character({length: 12}).set('/parameters/'))})));\n        ls_operation.get().parameters_ref.set((await this.parse_parameters_ref({iv_prefix: abap.operators.concat(lv_prefix,new abap.types.Character({length: 12}).set('/parameters/'))})));\n        ls_operation.get().responses.set((await this.parse_responses({iv_prefix: abap.operators.concat(lv_prefix,new abap.types.Character({length: 11}).set('/responses/'))})));\n        ls_operation.get().abap_name.set((await lo_names.get().to_abap_name({iv_name: ls_operation.get().operation_id})));\n        if (abap.compare.initial(ls_operation.get().abap_name)) {\n          ls_operation.get().abap_name.set((await lo_names.get().to_abap_name({iv_name: ls_operation.get().summary})));\n        }\n        if (abap.compare.initial(ls_operation.get().abap_name)) {\n          ls_operation.get().abap_name.set((await lo_names.get().to_abap_name({iv_name: lv_path})));\n        }\n        if (abap.compare.initial(ls_operation.get().abap_name)) {\n          continue;\n        }\n        ls_operation.get().body_schema_ref.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(lv_prefix,new abap.types.Character({length: 49}).set('/requestBody/content/application/json/schema/$ref'))})));\n        if (abap.compare.initial(ls_operation.get().body_schema_ref) && abap.compare.gt((abap.builtin.lines({val: (await this.mo_json.get().members({iv_path: abap.operators.concat(lv_prefix,new abap.types.Character({length: 45}).set('/requestBody/content/application/json/schema/'))}))})), constant_0)) {\n          ls_operation.get().body_schema.set((await this.parse_schema({iv_prefix: abap.operators.concat(lv_prefix,new abap.types.Character({length: 44}).set('/requestBody/content/application/json/schema'))})));\n        }\n        abap.statements.append({source: ls_operation, target: rt_operations});\n      }\n    }\n    return rt_operations;\n  }\n  async parse_parameters(INPUT) {\n    let rt_parameters = new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    let iv_prefix = new abap.types.String();\n    if (INPUT && INPUT.iv_prefix) {iv_prefix.set(INPUT.iv_prefix);}\n    let lt_members = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let lv_member = new abap.types.String();\n    let ls_parameter = new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\");\n    let lo_names = new abap.types.ABAPObject({qualifiedName: \"ZCL_OAPI_ABAP_NAME\"});\n    lt_members.set((await this.mo_json.get().members({iv_path: iv_prefix})));\n    for (const unique6 of abap.statements.loop(lt_members)) {\n      lv_member.set(unique6);\n      abap.statements.clear(ls_parameter);\n      ls_parameter.get().id.set(lv_member);\n      ls_parameter.get().name.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 5}).set('/name')))})));\n      if (abap.compare.initial(ls_parameter.get().name) === false) {\n        ls_parameter.get().in_.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 3}).set('/in')))})));\n        ls_parameter.get().description.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 12}).set('/description')))})));\n        ls_parameter.get().required.set((await this.mo_json.get().value_boolean({iv_path: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 9}).set('/required')))})));\n        lo_names.set(await (new abap.Classes['ZCL_OAPI_ABAP_NAME']()).constructor_());\n        ls_parameter.get().abap_name.set((await lo_names.get().to_abap_name({iv_name: ls_parameter.get().name})));\n        ls_parameter.get().schema_ref.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 12}).set('/schema/$ref')))})));\n        if (abap.compare.initial(ls_parameter.get().schema_ref)) {\n          ls_parameter.get().schema.set((await this.parse_schema({iv_prefix: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 7}).set('/schema')))})));\n        }\n        abap.statements.append({source: ls_parameter, target: rt_parameters});\n      }\n    }\n    return rt_parameters;\n  }\n  async parse_parameters_ref(INPUT) {\n    let rt_parameters = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let iv_prefix = new abap.types.String();\n    if (INPUT && INPUT.iv_prefix) {iv_prefix.set(INPUT.iv_prefix);}\n    let lt_members = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let lv_member = new abap.types.String();\n    let lv_ref = new abap.types.String();\n    lt_members.set((await this.mo_json.get().members({iv_path: iv_prefix})));\n    for (const unique7 of abap.statements.loop(lt_members)) {\n      lv_member.set(unique7);\n      lv_ref.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 5}).set('/$ref')))})));\n      if (abap.compare.initial(lv_ref) === false) {\n        abap.statements.append({source: lv_ref, target: rt_parameters});\n      }\n    }\n    return rt_parameters;\n  }\n  async parse_responses(INPUT) {\n    let rt_responses = new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    let iv_prefix = new abap.types.String();\n    if (INPUT && INPUT.iv_prefix) {iv_prefix.set(INPUT.iv_prefix);}\n    let lt_members = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let lv_member = new abap.types.String();\n    let ls_response = new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\");\n    lt_members.set((await this.mo_json.get().members({iv_path: iv_prefix})));\n    for (const unique8 of abap.statements.loop(lt_members)) {\n      lv_member.set(unique8);\n      abap.statements.clear(ls_response);\n      ls_response.get().code.set(lv_member);\n      ls_response.get().description.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 12}).set('/description')))})));\n      ls_response.get().content.set((await this.parse_media_types({iv_prefix: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 9}).set('/content/')))})));\n      abap.statements.append({source: ls_response, target: rt_responses});\n    }\n    return rt_responses;\n  }\n  async parse_media_types(INPUT) {\n    let rt_media_types = new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    let iv_prefix = new abap.types.String();\n    if (INPUT && INPUT.iv_prefix) {iv_prefix.set(INPUT.iv_prefix);}\n    let lt_members = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let lv_member = new abap.types.String();\n    let ls_media_type = new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\");\n    lt_members.set((await this.mo_json.get().members({iv_path: iv_prefix})));\n    for (const unique9 of abap.statements.loop(lt_members)) {\n      lv_member.set(unique9);\n      abap.statements.clear(ls_media_type);\n      ls_media_type.get().type.set(lv_member);\n      ls_media_type.get().schema_ref.set((await this.mo_json.get().value_string({iv_path: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 12}).set('/schema/$ref')))})));\n      if (abap.compare.initial(ls_media_type.get().schema_ref)) {\n        ls_media_type.get().schema.set((await this.parse_schema({iv_prefix: abap.operators.concat(iv_prefix,abap.operators.concat(lv_member,new abap.types.Character({length: 7}).set('/schema')))})));\n      }\n      abap.statements.append({source: ls_media_type, target: rt_media_types});\n    }\n    return rt_media_types;\n  }\n}\nabap.Classes['ZCL_OAPI_PARSER'] = zcl_oapi_parser;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://web/../output/zcl_oapi_parser.clas.mjs?");

/***/ })

}]);
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_zcl_oapi_main_clas_mjs"],{

/***/ "../output/zcl_oapi_main.clas.mjs":
/*!****************************************!*\
  !*** ../output/zcl_oapi_main.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zcl_oapi_main\": () => (/* binding */ zcl_oapi_main)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// zcl_oapi_main.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_1 = new abap.types.Integer().set(1);\nconst constant_30 = new abap.types.Integer().set(30);\nclass zcl_oapi_main {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.ms_specification = new abap.types.Structure({openapi: new abap.types.String(), info: new abap.types.Structure({title: new abap.types.String(), version: new abap.types.String(), description: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_info\"), servers: new abap.types.Table(new abap.types.Structure({url: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_server\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), operations: new abap.types.Table(new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject(), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), components: new abap.types.Structure({schemas: new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), examples: new abap.types.String(), request_bodies: new abap.types.String(), headers: new abap.types.String(), security_schemas: new abap.types.String(), links: new abap.types.String(), callbacks: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_components\")}, \"zif_oapi_specification_v3=>ty_specification\");\n    this.ms_input = new abap.types.Structure({class_name: new abap.types.Character({length: 30, qualifiedName: \"undefined\"}), interface_name: new abap.types.Character({length: 30, qualifiedName: \"undefined\"}), json: new abap.types.String()}, \"zcl_oapi_main=>ty_input\");\n    return this;\n  }\n  async run(INPUT) {\n    let rs_result = new abap.types.Structure({clas: new abap.types.String(), intf: new abap.types.String()}, \"zcl_oapi_main=>ty_result\");\n    let is_input = new abap.types.Structure({class_name: new abap.types.Character({length: 30, qualifiedName: \"undefined\"}), interface_name: new abap.types.Character({length: 30, qualifiedName: \"undefined\"}), json: new abap.types.String()}, \"zcl_oapi_main=>ty_input\");\n    if (INPUT && INPUT.is_input) {is_input.set(INPUT.is_input);}\n    let lo_parser = new abap.types.ABAPObject();\n    let lo_references = new abap.types.ABAPObject();\n    abap.statements.assert(abap.compare.initial(is_input.get().class_name) === false);\n    abap.statements.assert(abap.compare.initial(is_input.get().interface_name) === false);\n    abap.statements.assert(abap.compare.initial(is_input.get().json) === false);\n    this.ms_input.set(is_input);\n    lo_parser.set(await (new abap.Classes['ZCL_OAPI_PARSER']()).constructor_());\n    this.ms_specification.set(await lo_parser.get().parse({iv_json: is_input.get().json}));\n    lo_references.set(await (new abap.Classes['ZCL_OAPI_REFERENCES']()).constructor_());\n    this.ms_specification.set(await lo_references.get().fix({is_spec: this.ms_specification}));\n    rs_result.get().clas.set(await this.build_class());\n    rs_result.get().intf.set(await this.build_interface());\n    return rs_result;\n  }\n  async build_class() {\n    let rv_abap = new abap.types.String();\n    let ls_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject(), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    let ls_parameter = new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\");\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    rv_abap.set(abap.operators.concat(new abap.types.String().set(`CLASS ${this.ms_input.get().class_name.get()} DEFINITION PUBLIC.\\n`),abap.operators.concat(new abap.types.String().set(`* Generated by abap-openapi-client\\n`),abap.operators.concat(new abap.types.String().set(`* ${this.ms_specification.get().info.get().title.get()}, ${this.ms_specification.get().info.get().version.get()}\\n`),abap.operators.concat(new abap.types.String().set(`  PUBLIC SECTION.\\n`),abap.operators.concat(new abap.types.String().set(`    INTERFACES ${this.ms_input.get().interface_name.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`    METHODS constructor IMPORTING ii_client TYPE REF TO if_http_client.\\n`),abap.operators.concat(new abap.types.String().set(`  PROTECTED SECTION.\\n`),abap.operators.concat(new abap.types.String().set(`    DATA mi_client TYPE REF TO if_http_client.\\n`),abap.operators.concat(new abap.types.String().set(`    DATA mo_json TYPE REF TO zcl_oapi_json.\\n`),new abap.types.String().set(`    METHODS send_receive RETURNING VALUE(rv_code) TYPE i.\\n`)))))))))));\n    for (const unique8 of abap.statements.loop(this.ms_specification.get().components.get().schemas)) {\n      ls_schema.set(unique8);\n      if (abap.compare.initial(ls_schema.get().abap_parser_method) === false) {\n        rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`    METHODS ${ls_schema.get().abap_parser_method.get()}\\n`),abap.operators.concat(new abap.types.String().set(`      IMPORTING iv_prefix TYPE string\\n`),abap.operators.concat(new abap.types.String().set(`      RETURNING VALUE(${ls_schema.get().abap_name.get()}) TYPE ${this.ms_input.get().interface_name.get()}=>${ls_schema.get().abap_name.get()}\\n`),new abap.types.String().set(`      RAISING cx_static_check.\\n`))))));\n      }\n      if (abap.compare.initial(ls_schema.get().abap_json_method) === false) {\n        rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`    METHODS ${ls_schema.get().abap_json_method.get()}\\n`),abap.operators.concat(new abap.types.String().set(`      IMPORTING data TYPE ${this.ms_input.get().interface_name.get()}=>${ls_schema.get().abap_name.get()}\\n`),abap.operators.concat(new abap.types.String().set(`      RETURNING VALUE(json) TYPE string\\n`),new abap.types.String().set(`      RAISING cx_static_check.\\n`))))));\n      }\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`ENDCLASS.\\n\\n`),abap.operators.concat(new abap.types.String().set(`CLASS ${this.ms_input.get().class_name.get()} IMPLEMENTATION.\\n`),abap.operators.concat(new abap.types.String().set(`  METHOD constructor.\\n`),abap.operators.concat(new abap.types.String().set(`    mi_client = ii_client.\\n`),abap.operators.concat(new abap.types.String().set(`  ENDMETHOD.\\n\\n`),abap.operators.concat(new abap.types.String().set(`  METHOD send_receive.\\n`),abap.operators.concat(new abap.types.String().set(`    mi_client->send( ).\\n`),abap.operators.concat(new abap.types.String().set(`    mi_client->receive( ).\\n`),abap.operators.concat(new abap.types.String().set(`    mi_client->response->get_status( IMPORTING code = rv_code ).\\n`),new abap.types.String().set(`  ENDMETHOD.\\n\\n`))))))))))));\n    rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(await this.dump_parser_methods(),await this.dump_json_methods())));\n    for (const unique9 of abap.statements.loop(this.ms_specification.get().operations,{where: (i) => {return abap.compare.eq(i.deprecated, abap.builtin.abap_false);}})) {\n      ls_operation.set(unique9);\n      rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`  METHOD ${this.ms_input.get().interface_name.get()}~${ls_operation.get().abap_name.get()}.\\n`),abap.operators.concat(await this.operation_implementation({is_operation: ls_operation}),new abap.types.String().set(`  ENDMETHOD.\\n\\n`)))));\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`ENDCLASS.\\n`)));\n    return rv_abap;\n  }\n  async dump_json_methods() {\n    let rv_abap = new abap.types.String();\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    for (const unique10 of abap.statements.loop(this.ms_specification.get().components.get().schemas,{where: (i) => {return abap.compare.initial(i.abap_json_method) === false;}})) {\n      ls_schema.set(unique10);\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`  METHOD ${ls_schema.get().abap_json_method.get()}.\\n`)));\n      rv_abap.set(abap.operators.concat(rv_abap,await this.dump_json({ii_schema: ls_schema.get().schema})));\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`  ENDMETHOD.\\n\\n`)));\n    }\n    return rv_abap;\n  }\n  async dump_json(INPUT) {\n    let rv_abap = new abap.types.String();\n    let ii_schema = new abap.types.ABAPObject();\n    if (INPUT && INPUT.ii_schema) {ii_schema.set(INPUT.ii_schema);}\n    let ls_property = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), ref: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_schema=>ty_property\");\n    let unique11 = ii_schema.get().zif_oapi_schema$type;\n    if (abap.compare.eq(unique11, new abap.types.Character({length: 6}).set('object'))) {\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    json = json && '\\{'.\\n`)));\n      for (const unique12 of abap.statements.loop(ii_schema.get().zif_oapi_schema$properties)) {\n        ls_property.set(unique12);\n        if (abap.compare.initial(ls_property.get().schema) === false && abap.compare.eq(await ls_property.get().schema.get().zif_oapi_schema$is_simple_type(), abap.builtin.abap_true)) {\n          let unique13 = ls_property.get().schema.get().zif_oapi_schema$type;\n          if (abap.compare.eq(unique13, new abap.types.Character({length: 7}).set('integer'))) {\n            rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    IF data-${ls_property.get().abap_name.get()} <> cl_abap_math=>max_int4.\\n`)));\n            rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`      json = json && \\|\"${ls_property.get().name.get()}\": \\{ data-${ls_property.get().abap_name.get()} \\},\\|.\\n`)));\n            rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    ENDIF.\\n`)));\n          } else if (abap.compare.eq(unique13, new abap.types.Character({length: 7}).set('boolean'))) {\n            rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    IF data-${ls_property.get().abap_name.get()} = abap_true.\\n`)));\n            rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`      json = json && \\|\"${ls_property.get().name.get()}\": true,\\|.\\n`)));\n            rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    ELSEIF data-${ls_property.get().abap_name.get()} = abap_false.\\n`)));\n            rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`      json = json && \\|\"${ls_property.get().name.get()}\": false,\\|.\\n`)));\n            rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    ENDIF.\\n`)));\n          } else {\n            rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    json = json && \\|\"${ls_property.get().name.get()}\": \"\\{ data-${ls_property.get().abap_name.get()} \\}\",\\|.\\n`)));\n          }\n        } else {\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`*  json = json && '\"${ls_property.get().name.get()}\":' not simple\\n`)));\n        }\n      }\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    json = substring( val = json off = 0 len = strlen( json ) - 1 ).\\n`)));\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    json = json && '\\}'.\\n`)));\n    } else if (abap.compare.eq(unique11, new abap.types.Character({length: 5}).set('array'))) {\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    json = json && '['.\\n`)));\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* todo, array\\n`)));\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    json = json && ']'.\\n`)));\n    } else {\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* todo, ${ii_schema.get().zif_oapi_schema$type.get()}\\n`)));\n    }\n    return rv_abap;\n  }\n  async dump_parser_methods() {\n    let rv_abap = new abap.types.String();\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    for (const unique14 of abap.statements.loop(this.ms_specification.get().components.get().schemas,{where: (i) => {return abap.compare.initial(i.abap_parser_method) === false;}})) {\n      ls_schema.set(unique14);\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`  METHOD ${ls_schema.get().abap_parser_method.get()}.\\n`)));\n      rv_abap.set(abap.operators.concat(rv_abap,await this.dump_parser({ii_schema: ls_schema.get().schema, iv_abap_name: ls_schema.get().abap_name})));\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`  ENDMETHOD.\\n\\n`)));\n    }\n    return rv_abap;\n  }\n  async find_schema(INPUT) {\n    let rs_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let iv_name = new abap.types.String();\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let lv_name = new abap.types.String();\n    lv_name.set(iv_name);\n    abap.statements.replace(lv_name, false, new abap.types.Character({length: 21}).set('#/components/schemas/'), new abap.types.Character({length: 0}).set(''));\n    abap.statements.readTable(this.ms_specification.get().components.get().schemas,{into: rs_schema,withKey: (i) => {return abap.compare.eq(i.name, lv_name);}});\n    return rs_schema;\n  }\n  async find_parser_method(INPUT) {\n    let rv_method = new abap.types.String();\n    let iv_name = new abap.types.String();\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    ls_schema.set(await this.find_schema({iv_name: iv_name}));\n    if (abap.compare.initial(ls_schema) === false) {\n      rv_method.set(ls_schema.get().abap_parser_method);\n    } else {\n      rv_method.set(new abap.types.Character({length: 17}).set('unknown_not_found'));\n    }\n    return rv_method;\n  }\n  async dump_parser(INPUT) {\n    let rv_abap = new abap.types.String();\n    let ii_schema = new abap.types.ABAPObject();\n    if (INPUT && INPUT.ii_schema) {ii_schema.set(INPUT.ii_schema);}\n    let iv_abap_name = new abap.types.String();\n    if (INPUT && INPUT.iv_abap_name) {iv_abap_name.set(INPUT.iv_abap_name);}\n    let iv_hard_prefix = new abap.types.String();\n    if (INPUT && INPUT.iv_hard_prefix) {iv_hard_prefix.set(INPUT.iv_hard_prefix);}\n    let ls_property = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), ref: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_schema=>ty_property\");\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let lv_method = new abap.types.String();\n    let unique15 = ii_schema.get().zif_oapi_schema$type;\n    if (abap.compare.eq(unique15, new abap.types.Character({length: 6}).set('object'))) {\n      for (const unique16 of abap.statements.loop(ii_schema.get().zif_oapi_schema$properties)) {\n        ls_property.set(unique16);\n        if (abap.compare.initial(ls_property.get().schema) && abap.compare.initial(ls_property.get().ref) === false) {\n          lv_method.set(await this.find_parser_method({iv_name: ls_property.get().ref}));\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    ${iv_abap_name.get()}-${ls_property.get().abap_name.get()} = ${lv_method.get()}( iv_prefix && '${iv_hard_prefix.get()}/${ls_property.get().name.get()}' ).\\n`)));\n        } else if (abap.compare.initial(ls_property.get().schema)) {\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* todo initial, hmm\\n`)));\n        } else if (abap.compare.eq(ls_property.get().schema.get().zif_oapi_schema$type, new abap.types.Character({length: 6}).set('string')) || abap.compare.eq(ls_property.get().schema.get().zif_oapi_schema$type, new abap.types.Character({length: 7}).set('integer'))) {\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    ${iv_abap_name.get()}-${ls_property.get().abap_name.get()} = mo_json->value_string( iv_prefix && '${iv_hard_prefix.get()}/${ls_property.get().name.get()}' ).\\n`)));\n        } else if (abap.compare.eq(ls_property.get().schema.get().zif_oapi_schema$type, new abap.types.Character({length: 7}).set('boolean'))) {\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    ${iv_abap_name.get()}-${ls_property.get().abap_name.get()} = mo_json->value_boolean( iv_prefix && '${iv_hard_prefix.get()}/${ls_property.get().name.get()}' ).\\n`)));\n        } else if (abap.compare.eq(ls_property.get().schema.get().zif_oapi_schema$type, new abap.types.Character({length: 6}).set('object'))) {\n          rv_abap.set(abap.operators.concat(rv_abap,await this.dump_parser({ii_schema: ls_property.get().schema, iv_hard_prefix: abap.operators.concat(iv_hard_prefix,abap.operators.concat(new abap.types.Character({length: 1}).set('/'),ls_property.get().name)), iv_abap_name: new abap.types.String().set(`${iv_abap_name.get()}-${ls_property.get().abap_name.get()}`)})));\n        } else {\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* todo, ${ls_property.get().schema.get().zif_oapi_schema$type.get()}, ${ls_property.get().abap_name.get()}\\n`)));\n        }\n      }\n    } else if (abap.compare.eq(unique15, new abap.types.Character({length: 5}).set('array'))) {\n      if (abap.compare.initial(ii_schema.get().zif_oapi_schema$items_ref) === false) {\n        ls_schema.set(await this.find_schema({iv_name: ii_schema.get().zif_oapi_schema$items_ref}));\n        rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`    DATA lt_members TYPE string_table.\\n`),abap.operators.concat(new abap.types.String().set(`    DATA lv_member LIKE LINE OF lt_members.\\n`),abap.operators.concat(new abap.types.String().set(`    DATA ${ls_schema.get().abap_name.get()} TYPE ${this.ms_input.get().interface_name.get()}=>${ls_schema.get().abap_name.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`    lt_members = mo_json->members( iv_prefix && '/' ).\\n`),abap.operators.concat(new abap.types.String().set(`    LOOP AT lt_members INTO lv_member.\\n`),abap.operators.concat(new abap.types.String().set(`      CLEAR ${ls_schema.get().abap_name.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`      ${ls_schema.get().abap_name.get()} = ${ls_schema.get().abap_parser_method.get()}( iv_prefix && '/' && lv_member ).\\n`),abap.operators.concat(new abap.types.String().set(`      APPEND ${ls_schema.get().abap_name.get()} TO ${iv_abap_name.get()}.\\n`),new abap.types.String().set(`    ENDLOOP.\\n`)))))))))));\n      } else {\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* todo, handle type ${ii_schema.get().zif_oapi_schema$type.get()}, no item_ref\\n`)));\n      }\n    } else if (abap.compare.eq(unique15, new abap.types.Character({length: 7}).set('integer'))) {\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    ${iv_abap_name.get()} = mo_json->value_integer( iv_prefix && '${iv_hard_prefix.get()}/${ls_property.get().name.get()}' ).\\n`)));\n    } else {\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* todo, handle type ${ii_schema.get().zif_oapi_schema$type.get()}\\n`)));\n    }\n    return rv_abap;\n  }\n  async dump_types() {\n    let rv_abap = new abap.types.String();\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let ls_property = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), ref: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_schema=>ty_property\");\n    let lv_count = new abap.types.Integer();\n    let lo_names = new abap.types.ABAPObject();\n    lo_names.set(await (new abap.Classes['ZCL_OAPI_ABAP_NAME']()).constructor_());\n    for (const unique17 of abap.statements.loop(this.ms_specification.get().components.get().schemas)) {\n      ls_schema.set(unique17);\n      await lo_names.get().add_used({iv_name: ls_schema.get().abap_name});\n    }\n    for (const unique18 of abap.statements.loop(this.ms_specification.get().components.get().schemas)) {\n      ls_schema.set(unique18);\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* Component schema: ${ls_schema.get().name.get()}, ${ls_schema.get().schema.get().zif_oapi_schema$type.get()}\\n`)));\n      rv_abap.set(abap.operators.concat(rv_abap,await ls_schema.get().schema.get().zif_oapi_schema$build_type_definition({iv_name: ls_schema.get().abap_name, io_names: lo_names, it_refs: this.ms_specification.get().components.get().schemas})));\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`\\n`)));\n    }\n    return rv_abap;\n  }\n  async build_interface() {\n    let rv_abap = new abap.types.String();\n    let ls_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject(), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    let ls_parameter = new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\");\n    let ls_response = new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\");\n    let ls_content = new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\");\n    let ls_return = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let lv_required = new abap.types.String();\n    let lv_extra = new abap.types.String();\n    let lv_ref = new abap.types.String();\n    rv_abap.set(abap.operators.concat(new abap.types.String().set(`INTERFACE ${this.ms_input.get().interface_name.get()} PUBLIC.\\n`),abap.operators.concat(new abap.types.String().set(`* Generated by abap-openapi-client\\n`),new abap.types.String().set(`* ${this.ms_specification.get().info.get().title.get()}, ${this.ms_specification.get().info.get().version.get()}\\n\\n`))));\n    rv_abap.set(abap.operators.concat(rv_abap,await this.dump_types()));\n    for (const unique19 of abap.statements.loop(this.ms_specification.get().operations,{where: (i) => {return abap.compare.eq(i.deprecated, abap.builtin.abap_false);}})) {\n      ls_operation.set(unique19);\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* ${abap.builtin.to_upper({val: ls_operation.get().method}).get()} - \"${ls_operation.get().summary.get()}\"\\n`)));\n      if (abap.compare.initial(ls_operation.get().operation_id) === false) {\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* Operation id: ${ls_operation.get().operation_id.get()}\\n`)));\n      }\n      for (const unique20 of abap.statements.loop(ls_operation.get().parameters)) {\n        ls_parameter.set(unique20);\n        if (abap.compare.eq(ls_parameter.get().required, abap.builtin.abap_true)) {\n          lv_required.set(new abap.types.Character({length: 8}).set('required'));\n        } else {\n          lv_required.set(new abap.types.Character({length: 8}).set('optional'));\n        }\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* Parameter: ${ls_parameter.get().name.get()}, ${lv_required.get()}, ${ls_parameter.get().in_.get()}\\n`)));\n      }\n      for (const unique21 of abap.statements.loop(ls_operation.get().responses)) {\n        ls_response.set(unique21);\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* Response: ${ls_response.get().code.get()}\\n`)));\n        for (const unique22 of abap.statements.loop(ls_response.get().content)) {\n          ls_content.set(unique22);\n          if (abap.compare.initial(ls_content.get().schema_ref) === false) {\n            lv_extra.set(new abap.types.String().set(`, ${ls_content.get().schema_ref.get()}`));\n          } else {\n            lv_extra.set(new abap.types.String().set(`, ${ls_content.get().schema.get().zif_oapi_schema$type.get()}`));\n          }\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`*     ${ls_content.get().type.get()}${lv_extra.get()}\\n`)));\n        }\n      }\n      if (abap.compare.initial(ls_operation.get().body_schema_ref) === false) {\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* Body ref: ${ls_operation.get().body_schema_ref.get()}\\n`)));\n      } else if (abap.compare.initial(ls_operation.get().body_schema) === false) {\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* Body schema: ${ls_operation.get().body_schema.get().zif_oapi_schema$type.get()}\\n`)));\n      }\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`  METHODS ${ls_operation.get().abap_name.get()}${(await this.build_abap_parameters({is_operation: ls_operation})).get()}`)));\n      ls_return.set(await this.find_return({is_operation: ls_operation}));\n      if (abap.compare.initial(ls_return) === false) {\n        rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`    RETURNING\\n`),new abap.types.String().set(`      VALUE(return_data) TYPE ${ls_return.get().abap_name.get()}\\n`))));\n      }\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    RAISING cx_static_check.\\n\\n`)));\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`ENDINTERFACE.\\n`)));\n    return rv_abap;\n  }\n  async find_uri_prefix(INPUT) {\n    let rv_prefix = new abap.types.String();\n    let is_servers = new abap.types.Table(new abap.types.Structure({url: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_server\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    if (INPUT && INPUT.is_servers) {is_servers.set(INPUT.is_servers);}\n    let ls_server = new abap.types.Structure({url: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_server\");\n    abap.statements.readTable(is_servers,{index: constant_1,into: ls_server});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n      rv_prefix.set(ls_server.get().url);\n      if (abap.compare.cp(rv_prefix, new abap.types.Character({length: 5}).set('http*'))) {\n        abap.statements.find(ls_server.get().url, {regex: new abap.types.Character({length: 19}).set('\\\\w(\\\\/[\\\\w\\\\d\\\\.\\\\-\\\\/]+)'), submatches: [rv_prefix]});\n      }\n    }\n    return rv_prefix;\n  }\n  async operation_implementation(INPUT) {\n    let rv_abap = new abap.types.String();\n    let is_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject(), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    if (INPUT && INPUT.is_operation) {is_operation.set(INPUT.is_operation);}\n    let ls_parameter = new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\");\n    let ls_return = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let ls_response = new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\");\n    let ls_content = new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\");\n    let lv_value = new abap.types.String();\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    rv_abap.set(abap.operators.concat(new abap.types.String().set(`    DATA lv_code TYPE i.\\n`),abap.operators.concat(new abap.types.String().set(`    DATA lv_temp TYPE string.\\n`),new abap.types.String().set(`    DATA lv_uri TYPE string VALUE '${(await this.find_uri_prefix({is_servers: this.ms_specification.get().servers})).get()}${is_operation.get().path.get()}'.\\n`))));\n    for (const unique23 of abap.statements.loop(is_operation.get().parameters,{where: (i) => {return abap.compare.eq(i.in_, new abap.types.Character({length: 4}).set('path'));}})) {\n      ls_parameter.set(unique23);\n      rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`    lv_temp = ${ls_parameter.get().abap_name.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`    lv_temp = cl_http_utility=>escape_url( condense( lv_temp ) ).\\n`),new abap.types.String().set(`    REPLACE ALL OCCURRENCES OF '\\{${ls_parameter.get().name.get()}\\}' IN lv_uri WITH lv_temp.\\n`)))));\n    }\n    for (const unique24 of abap.statements.loop(is_operation.get().parameters,{where: (i) => {return abap.compare.eq(i.in_, new abap.types.Character({length: 5}).set('query'));}})) {\n      ls_parameter.set(unique24);\n      lv_value.set(ls_parameter.get().abap_name);\n      if (abap.compare.initial(ls_parameter.get().schema) === false && abap.compare.ne(ls_parameter.get().schema.get().zif_oapi_schema$type, new abap.types.Character({length: 6}).set('string'))) {\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    lv_temp = ${lv_value.get()}.\\n`)));\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    CONDENSE lv_temp.\\n`)));\n        lv_value.set(new abap.types.Character({length: 7}).set('lv_temp'));\n      }\n      if (abap.compare.eq(ls_parameter.get().required, abap.builtin.abap_false)) {\n        rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`    IF ${ls_parameter.get().abap_name.get()} IS SUPPLIED.\\n`),abap.operators.concat(new abap.types.String().set(`      mi_client->request->set_form_field( name = '${ls_parameter.get().name.get()}' value = ${lv_value.get()} ).\\n`),new abap.types.String().set(`    ENDIF.\\n`)))));\n      } else {\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    mi_client->request->set_form_field( name = '${ls_parameter.get().name.get()}' value = ${lv_value.get()} ).\\n`)));\n      }\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`    mi_client->request->set_method( '${abap.builtin.to_upper({val: is_operation.get().method}).get()}' ).\\n`),new abap.types.String().set(`    mi_client->request->set_header_field( name = '~request_uri' value = lv_uri ).\\n`))));\n    for (const unique25 of abap.statements.loop(is_operation.get().parameters,{where: (i) => {return abap.compare.eq(i.in_, new abap.types.Character({length: 6}).set('header'));}})) {\n      ls_parameter.set(unique25);\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    mi_client->request->set_header_field( name = '${ls_parameter.get().name.get()}' value = ${ls_parameter.get().abap_name.get()} ).\\n`)));\n    }\n    if (abap.compare.initial(is_operation.get().body_schema_ref) === false) {\n      rv_abap.set(abap.operators.concat(rv_abap,await this.abap_schema_to_json({iv_name: is_operation.get().body_schema_ref})));\n    } else if (abap.compare.initial(is_operation.get().body_schema) === false && abap.compare.eq(is_operation.get().body_schema.get().zif_oapi_schema$type, new abap.types.Character({length: 6}).set('string'))) {\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    mi_client->request->set_cdata( body ).\\n`)));\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`    lv_code = send_receive( ).\\n`),new abap.types.String().set(`    WRITE / lv_code.\\n`))));\n    ls_return.set(await this.find_return({is_operation: is_operation}));\n    rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    CASE lv_code.\\n`)));\n    for (const unique26 of abap.statements.loop(is_operation.get().responses)) {\n      ls_response.set(unique26);\n      if (abap.compare.eq(ls_response.get().code, new abap.types.Character({length: 7}).set('default'))) {\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`      WHEN OTHERS.\\n`)));\n      } else {\n        if (abap.compare.initial(ls_response.get().description) === false) {\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`      WHEN ${ls_response.get().code.get()}. \" ${ls_response.get().description.get()}\\n`)));\n        } else {\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`      WHEN ${ls_response.get().code.get()}.\\n`)));\n        }\n        for (const unique27 of abap.statements.loop(ls_response.get().content,{where: (i) => {return abap.compare.eq(i.type, new abap.types.Character({length: 16}).set('application/json'));}})) {\n          ls_content.set(unique27);\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`\" ${ls_content.get().type.get()},${ls_content.get().schema_ref.get()}\\n`)));\n          if (abap.compare.initial(ls_content.get().schema_ref) === false) {\n            ls_schema.set(await this.find_schema({iv_name: ls_content.get().schema_ref}));\n            if (abap.compare.initial(ls_schema) === false && abap.compare.eq(ls_schema.get().abap_parser_method, ls_return.get().abap_parser_method)) {\n              rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).\\n`),new abap.types.String().set(`        return_data = ${ls_schema.get().abap_parser_method.get()}( '' ).\\n`))));\n            } else if (abap.compare.initial(ls_schema) === false && abap.compare.initial(ls_schema.get().abap_parser_method) === false) {\n              rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`        CREATE OBJECT mo_json EXPORTING iv_json = mi_client->response->get_cdata( ).\\n`),new abap.types.String().set(`        ${ls_schema.get().abap_parser_method.get()}( '' ).\\n`))));\n            }\n          }\n        }\n        if (abap.compare.eq(await this.is_success_code({iv_code: ls_response.get().code}), abap.builtin.abap_false)) {\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`\" todo, raise\\n`)));\n        }\n      }\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`    ENDCASE.\\n`)));\n    return rv_abap;\n  }\n  async abap_schema_to_json(INPUT) {\n    let rv_abap = new abap.types.String();\n    let iv_name = new abap.types.String();\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    ls_schema.set(await this.find_schema({iv_name: iv_name}));\n    if (abap.compare.initial(ls_schema) === false) {\n      if (abap.compare.initial(ls_schema.get().abap_json_method) === false) {\n        rv_abap.set(new abap.types.String().set(`    mi_client->request->set_cdata( ${ls_schema.get().abap_json_method.get()}( body ) ).\\n`));\n      } else {\n        rv_abap.set(new abap.types.String().set(`* todo, set body, ${iv_name.get()}\\n`));\n      }\n    }\n    return rv_abap;\n  }\n  async is_success_code(INPUT) {\n    let rv_bool = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    let iv_code = new abap.types.String();\n    if (INPUT && INPUT.iv_code) {iv_code.set(INPUT.iv_code);}\n    rv_bool.set(abap.builtin.boolc(abap.compare.eq(iv_code, new abap.types.Character({length: 3}).set('200')) || abap.compare.eq(iv_code, new abap.types.Character({length: 3}).set('201')) || abap.compare.eq(iv_code, new abap.types.Character({length: 3}).set('204'))));\n    return rv_bool;\n  }\n  async find_return(INPUT) {\n    let rs_type = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let is_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject(), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    if (INPUT && INPUT.is_operation) {is_operation.set(INPUT.is_operation);}\n    let ls_response = new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\");\n    let ls_content = new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\");\n    for (const unique28 of abap.statements.loop(is_operation.get().responses)) {\n      ls_response.set(unique28);\n      if (abap.compare.eq(await this.is_success_code({iv_code: ls_response.get().code}), abap.builtin.abap_true)) {\n        abap.statements.readTable(ls_response.get().content,{into: ls_content,withKey: (i) => {return abap.compare.eq(i.type, new abap.types.Character({length: 16}).set('application/json'));}});\n        if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0) && abap.compare.initial(ls_content.get().schema_ref) === false) {\n          rs_type.set(await this.find_schema({iv_name: ls_content.get().schema_ref}));\n          if (abap.compare.initial(rs_type) === false) {\n            return rs_type;\n          }\n        }\n      }\n    }\n    return rs_type;\n  }\n  async build_abap_parameters(INPUT) {\n    let rv_abap = new abap.types.String();\n    let is_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject(), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    if (INPUT && INPUT.is_operation) {is_operation.set(INPUT.is_operation);}\n    let ls_parameter = new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject(), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\");\n    let lt_tab = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let ls_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject()}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let lv_type = new abap.types.String();\n    let lv_text = new abap.types.String();\n    let lv_default = new abap.types.String();\n    for (const unique29 of abap.statements.loop(is_operation.get().parameters)) {\n      ls_parameter.set(unique29);\n      if (abap.compare.initial(ls_parameter.get().schema) === false) {\n        lv_type.set(await ls_parameter.get().schema.get().zif_oapi_schema$get_simple_type());\n      }\n      if (abap.compare.initial(ls_parameter.get().schema_ref) === false) {\n        ls_schema.set(await this.find_schema({iv_name: ls_parameter.get().schema_ref}));\n        lv_type.set(ls_schema.get().abap_name);\n      }\n      if (abap.compare.initial(lv_type)) {\n        lv_type.set(new abap.types.Character({length: 6}).set('string'));\n      }\n      abap.statements.clear(lv_default);\n      if (abap.compare.initial(ls_parameter.get().schema) === false && abap.compare.initial(ls_parameter.get().schema.get().zif_oapi_schema$default_) === false) {\n        if (abap.compare.co(ls_parameter.get().schema.get().zif_oapi_schema$default_, new abap.types.Character({length: 10}).set('0123456789'))) {\n          lv_default.set(new abap.types.String().set(` DEFAULT ${ls_parameter.get().schema.get().zif_oapi_schema$default_.get()}`));\n        } else if (abap.compare.eq(ls_parameter.get().schema.get().zif_oapi_schema$type, new abap.types.Character({length: 7}).set('boolean'))) {\n          lv_default.set(new abap.types.String().set(` DEFAULT abap_${ls_parameter.get().schema.get().zif_oapi_schema$default_.get()}`));\n        } else {\n          lv_default.set(new abap.types.String().set(` DEFAULT '${ls_parameter.get().schema.get().zif_oapi_schema$default_.get()}'`));\n        }\n      }\n      lv_text.set(abap.operators.concat(new abap.types.String().set(`      `),abap.operators.concat(ls_parameter.get().abap_name,abap.operators.concat(new abap.types.String().set(` TYPE `),abap.operators.concat(lv_type,lv_default)))));\n      if (abap.compare.eq(ls_parameter.get().required, abap.builtin.abap_false) && abap.compare.initial(lv_default)) {\n        lv_text.set(abap.operators.concat(lv_text,new abap.types.String().set(` OPTIONAL`)));\n      }\n      abap.statements.append({source: lv_text, target: lt_tab});\n    }\n    if (abap.compare.gt(abap.builtin.lines({val: lt_tab}), constant_0)) {\n      lv_text.set(abap.builtin.concat_lines_of({table: lt_tab, sep: new abap.types.String().set(`\\n`)}));\n    }\n    if (abap.compare.initial(is_operation.get().body_schema_ref) === false) {\n      ls_schema.set(await this.find_schema({iv_name: is_operation.get().body_schema_ref}));\n      if (abap.compare.initial(ls_schema) === false) {\n        if (abap.compare.initial(lv_text) === false) {\n          lv_text.set(abap.operators.concat(lv_text,new abap.types.String().set(`\\n`)));\n        }\n        lv_text.set(abap.operators.concat(lv_text,new abap.types.String().set(`      body TYPE ${ls_schema.get().abap_name.get()}`)));\n      }\n    } else if (abap.compare.initial(is_operation.get().body_schema) === false && abap.compare.eq(is_operation.get().body_schema.get().zif_oapi_schema$type, new abap.types.Character({length: 6}).set('string'))) {\n      if (abap.compare.initial(lv_text) === false) {\n        lv_text.set(abap.operators.concat(lv_text,new abap.types.String().set(`\\n`)));\n      }\n      lv_text.set(abap.operators.concat(lv_text,new abap.types.String().set(`      body TYPE string`)));\n    }\n    if (abap.compare.initial(lv_text) === false) {\n      rv_abap.set(abap.operators.concat(new abap.types.String().set(`\\n    IMPORTING\\n`),abap.operators.concat(lv_text,new abap.types.String().set(`\\n`))));\n    } else {\n      rv_abap.set(new abap.types.String().set(`\\n`));\n    }\n    return rv_abap;\n  }\n}\nabap.Classes['ZCL_OAPI_MAIN'] = zcl_oapi_main;\n\n__webpack_handle_async_dependencies__();\n}, 1);\n\n//# sourceURL=webpack://web/../output/zcl_oapi_main.clas.mjs?");

/***/ })

}]);
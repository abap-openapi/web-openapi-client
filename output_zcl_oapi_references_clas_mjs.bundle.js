"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_zcl_oapi_references_clas_mjs"],{

/***/ "../output/zcl_oapi_references.clas.mjs":
/*!**********************************************!*\
  !*** ../output/zcl_oapi_references.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zcl_oapi_references\": () => (/* binding */ zcl_oapi_references)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// zcl_oapi_references.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_1 = new abap.types.Integer().set(1);\nclass zcl_oapi_references {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.ms_spec = new abap.types.Structure({openapi: new abap.types.String(), info: new abap.types.Structure({title: new abap.types.String(), version: new abap.types.String(), description: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_info\"), servers: new abap.types.Table(new abap.types.Structure({url: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_server\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), operations: new abap.types.Table(new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), components: new abap.types.Structure({schemas: new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), examples: new abap.types.String(), request_bodies: new abap.types.String(), headers: new abap.types.String(), security_schemas: new abap.types.String(), links: new abap.types.String(), callbacks: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_components\")}, \"zif_oapi_specification_v3=>ty_specification\");\n    return this;\n  }\n  async fix(INPUT) {\n    let rs_spec = new abap.types.Structure({openapi: new abap.types.String(), info: new abap.types.Structure({title: new abap.types.String(), version: new abap.types.String(), description: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_info\"), servers: new abap.types.Table(new abap.types.Structure({url: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_server\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), operations: new abap.types.Table(new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), components: new abap.types.Structure({schemas: new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), examples: new abap.types.String(), request_bodies: new abap.types.String(), headers: new abap.types.String(), security_schemas: new abap.types.String(), links: new abap.types.String(), callbacks: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_components\")}, \"zif_oapi_specification_v3=>ty_specification\");\n    let is_spec = new abap.types.Structure({openapi: new abap.types.String(), info: new abap.types.Structure({title: new abap.types.String(), version: new abap.types.String(), description: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_info\"), servers: new abap.types.Table(new abap.types.Structure({url: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_server\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), operations: new abap.types.Table(new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), components: new abap.types.Structure({schemas: new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), examples: new abap.types.String(), request_bodies: new abap.types.String(), headers: new abap.types.String(), security_schemas: new abap.types.String(), links: new abap.types.String(), callbacks: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_components\")}, \"zif_oapi_specification_v3=>ty_specification\");\n    if (INPUT && INPUT.is_spec) {is_spec.set(INPUT.is_spec);}\n    this.ms_spec.set(is_spec);\n    await this.dereference_parameters();\n    await this.create_body_references();\n    await this.create_response_references();\n    rs_spec.set(this.ms_spec);\n    return rs_spec;\n  }\n  async create_response_references() {\n    let fs_ls_operation_ = new abap.types.FieldSymbol();\n    let fs_ls_response_ = new abap.types.FieldSymbol();\n    let fs_ls_content_ = new abap.types.FieldSymbol();\n    let ls_new = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let lo_names = new abap.types.ABAPObject({qualifiedName: \"ZCL_OAPI_ABAP_NAME\"});\n    lo_names.set(await (new abap.Classes['ZCL_OAPI_ABAP_NAME']()).constructor_());\n    for (const unique39 of abap.statements.loop(this.ms_spec.get().operations,{where: (i) => {return abap.compare.eq(i.deprecated, abap.builtin.abap_false);}})) {\n      fs_ls_operation_.assign(unique39);\n      for (const unique40 of abap.statements.loop(fs_ls_operation_.get().responses)) {\n        fs_ls_response_.assign(unique40);\n        for (const unique41 of abap.statements.loop(fs_ls_response_.get().content,{where: (i) => {return abap.compare.eq(i.type, new abap.types.Character({length: 16}).set('application/json')) && abap.compare.initial(i.schema_ref) && abap.compare.initial(i.schema) === false;}})) {\n          fs_ls_content_.assign(unique41);\n          if (abap.compare.eq(await fs_ls_content_.get().schema.get().zif_oapi_schema$is_simple_type(), abap.builtin.abap_true)) {\n            continue;\n          }\n          ls_new.get().name.set(new abap.types.String().set(`response_${fs_ls_operation_.get().abap_name.get()}`));\n          ls_new.get().abap_name.set(await lo_names.get().to_abap_name({iv_name: ls_new.get().name}));\n          ls_new.get().abap_parser_method.set(await lo_names.get().to_abap_name({iv_name: new abap.types.String().set(`parse_${fs_ls_operation_.get().abap_name.get()}`)}));\n          abap.statements.clear(ls_new.get().abap_json_method);\n          ls_new.get().schema.set(fs_ls_content_.get().schema);\n          abap.statements.append({source: ls_new, target: this.ms_spec.get().components.get().schemas});\n          fs_ls_content_.get().schema_ref.set(abap.operators.concat(new abap.types.Character({length: 21}).set('#/components/schemas/'),ls_new.get().name));\n        }\n      }\n    }\n  }\n  async create_body_references() {\n    let fs_ls_operation_ = new abap.types.FieldSymbol();\n    let ls_new = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let lo_names = new abap.types.ABAPObject({qualifiedName: \"ZCL_OAPI_ABAP_NAME\"});\n    lo_names.set(await (new abap.Classes['ZCL_OAPI_ABAP_NAME']()).constructor_());\n    for (const unique42 of abap.statements.loop(this.ms_spec.get().operations,{where: (i) => {return abap.compare.eq(i.deprecated, abap.builtin.abap_false);}})) {\n      fs_ls_operation_.assign(unique42);\n      if (abap.compare.initial(fs_ls_operation_.get().body_schema) === false && abap.compare.eq(await fs_ls_operation_.get().body_schema.get().zif_oapi_schema$is_simple_type(), abap.builtin.abap_false)) {\n        ls_new.get().name.set(await lo_names.get().to_abap_name({iv_name: new abap.types.String().set(`body${fs_ls_operation_.get().abap_name.get()}`)}));\n        ls_new.get().abap_name.set(ls_new.get().name);\n        ls_new.get().abap_json_method.set(await lo_names.get().to_abap_name({iv_name: new abap.types.String().set(`json_${fs_ls_operation_.get().abap_name.get()}`)}));\n        abap.statements.clear(ls_new.get().abap_parser_method);\n        ls_new.get().schema.set(fs_ls_operation_.get().body_schema);\n        abap.statements.append({source: ls_new, target: this.ms_spec.get().components.get().schemas});\n        fs_ls_operation_.get().body_schema_ref.set(abap.operators.concat(new abap.types.Character({length: 21}).set('#/components/schemas/'),ls_new.get().name));\n        abap.statements.clear(fs_ls_operation_.get().body_schema);\n      }\n    }\n  }\n  async dereference_parameters() {\n    let fs_ls_operation_ = new abap.types.FieldSymbol();\n    let ls_parameter = new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\");\n    let lv_ref = new abap.types.String();\n    for (const unique43 of abap.statements.loop(this.ms_spec.get().operations,{where: (i) => {return abap.compare.eq(i.deprecated, abap.builtin.abap_false);}})) {\n      fs_ls_operation_.assign(unique43);\n      for (const unique44 of abap.statements.loop(fs_ls_operation_.get().parameters_ref)) {\n        lv_ref.set(unique44);\n        abap.statements.replace({target:lv_ref, all:false, with: new abap.types.Character({length: 0}).set(''),of: new abap.types.Character({length: 24}).set('#/components/parameters/')});\n        abap.statements.readTable(this.ms_spec.get().components.get().parameters,{into: ls_parameter,withKey: (i) => {return abap.compare.eq(i.id, lv_ref);}});\n        if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n          abap.statements.append({source: ls_parameter, target: fs_ls_operation_.get().parameters});\n        } else {\n          abap.statements.assert(abap.compare.eq(constant_0, constant_1));\n        }\n      }\n      abap.statements.clear(fs_ls_operation_.get().parameters_ref);\n    }\n  }\n}\nabap.Classes['ZCL_OAPI_REFERENCES'] = zcl_oapi_references;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://web/../output/zcl_oapi_references.clas.mjs?");

/***/ })

}]);
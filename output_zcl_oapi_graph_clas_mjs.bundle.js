"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_zcl_oapi_graph_clas_mjs"],{

/***/ "../output/zcl_oapi_graph.clas.mjs":
/*!*****************************************!*\
  !*** ../output/zcl_oapi_graph.clas.mjs ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zcl_oapi_graph\": () => (/* binding */ zcl_oapi_graph)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// zcl_oapi_graph.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_1 = new abap.types.Integer().set(1);\nclass zcl_oapi_graph {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mt_vertices = new abap.types.Table(new abap.types.String(), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    this.mt_edges = new abap.types.Table(new abap.types.Structure({from: new abap.types.String(), to: new abap.types.String()}, \"zcl_oapi_graph=>ty_edge\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    return this;\n  }\n  async is_empty() {\n    let rv_empty = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    rv_empty.set(abap.builtin.boolc(abap.compare.eq(abap.builtin.lines({val: this.mt_vertices}), constant_0)));\n    return rv_empty;\n  }\n  async dump() {\n    let ls_edge = new abap.types.Structure({from: new abap.types.String(), to: new abap.types.String()}, \"zcl_oapi_graph=>ty_edge\");\n    for (const unique15 of abap.statements.loop(this.mt_edges)) {\n      ls_edge.set(unique15);\n      abap.statements.write(ls_edge.get().from,{newLine: true});\n      abap.statements.write(new abap.types.Character({length: 2}).set('->'));\n      abap.statements.write(ls_edge.get().to);\n    }\n  }\n  async pop() {\n    let rv_node = new abap.types.String();\n    let lv_vertex = new abap.types.String();\n    let lv_index = new abap.types.Integer();\n    abap.statements.assert(abap.compare.eq((await this.is_empty()), abap.builtin.abap_false));\n    for (const unique16 of abap.statements.loop(this.mt_vertices)) {\n      lv_vertex.set(unique16);\n      lv_index.set(abap.builtin.sy.get().tabix);\n      abap.statements.readTable(this.mt_edges,{withKey: (i) => {return abap.compare.eq(i.to, lv_vertex);}});\n      if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n        continue;\n      }\n      abap.statements.deleteInternal(this.mt_vertices,{index: lv_index});\n      abap.statements.deleteInternal(this.mt_edges,{where: (i) => {return abap.compare.eq(i.from, lv_vertex);}});\n      rv_node.set(lv_vertex);\n      return rv_node;\n    }\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 16}).set('graph has cycles')));\n    return rv_node;\n  }\n  async add_vertex(INPUT) {\n    let iv_vertex = new abap.types.String();\n    if (INPUT && INPUT.iv_vertex) {iv_vertex.set(INPUT.iv_vertex);}\n    abap.statements.readTable(this.mt_vertices,{withKey: (i) => {return abap.compare.eq(i.table_line, iv_vertex);}});\n    abap.statements.assert(abap.compare.ne(abap.builtin.sy.get().subrc, constant_0));\n    abap.statements.append({source: iv_vertex, target: this.mt_vertices});\n  }\n  async add_edge(INPUT) {\n    let iv_from = new abap.types.String();\n    if (INPUT && INPUT.iv_from) {iv_from.set(INPUT.iv_from);}\n    let iv_to = new abap.types.String();\n    if (INPUT && INPUT.iv_to) {iv_to.set(INPUT.iv_to);}\n    let ls_edge = new abap.types.Structure({from: new abap.types.String(), to: new abap.types.String()}, \"zcl_oapi_graph=>ty_edge\");\n    abap.statements.assert(abap.compare.initial(iv_from) === false);\n    abap.statements.assert(abap.compare.initial(iv_to) === false);\n    abap.statements.readTable(this.mt_vertices,{withKey: (i) => {return abap.compare.eq(i.table_line, iv_from);}});\n    abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, constant_0));\n    abap.statements.readTable(this.mt_vertices,{withKey: (i) => {return abap.compare.eq(i.table_line, iv_to);}});\n    abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, constant_0));\n    abap.statements.readTable(this.mt_edges,{withKey: (i) => {return abap.compare.eq(i.from, iv_from) && abap.compare.eq(i.to, iv_to);}});\n    if (abap.compare.ne(abap.builtin.sy.get().subrc, constant_0)) {\n      ls_edge.get().from.set(iv_from);\n      ls_edge.get().to.set(iv_to);\n      abap.statements.insertInternal({data: ls_edge, table: this.mt_edges});\n    }\n  }\n}\nabap.Classes['ZCL_OAPI_GRAPH'] = zcl_oapi_graph;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://web/../output/zcl_oapi_graph.clas.mjs?");

/***/ })

}]);
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_zcl_oapi_json_clas_mjs"],{

/***/ "../output/zcl_oapi_json.clas.mjs":
/*!****************************************!*\
  !*** ../output/zcl_oapi_json.clas.mjs ***!
  \****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zcl_oapi_json\": () => (/* binding */ zcl_oapi_json)\n/* harmony export */ });\nawait __webpack_require__.e(/*! import() */ \"output_zcl_oapi_json_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./zcl_oapi_json.clas.locals.mjs */ \"../output/zcl_oapi_json.clas.locals.mjs\"));\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// zcl_oapi_json.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_1 = new abap.types.Integer().set(1);\nclass zcl_oapi_json {\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mt_data = new abap.types.Table(new abap.types.Structure({parent: new abap.types.String(), name: new abap.types.String(), full_name: new abap.types.String(), value: new abap.types.String()}), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    let iv_json = new abap.types.String();\n    if (INPUT && INPUT.iv_json) {iv_json.set(INPUT.iv_json);}\n    let lo_parser = new abap.types.ABAPObject();\n    lo_parser.set(await (new abap.Classes['CLAS-ZCL_OAPI_JSON-LCL_PARSER']()).constructor_());\n    this.mt_data.set(await lo_parser.get().parse({iv_json: iv_json}));\n    return this;\n  }\n  async exists(INPUT) {\n    let rv_exists = new abap.types.Character();\n    let iv_path = new abap.types.String();\n    if (INPUT && INPUT.iv_path) {iv_path.set(INPUT.iv_path);}\n    abap.statements.readTable(this.mt_data,{withKey: (i) => {return abap.compare.eq(i.full_name, iv_path);}});\n    rv_exists.set(abap.builtin.boolc(abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)));\n    return rv_exists;\n  }\n  async members(INPUT) {\n    let rt_members = new abap.types.Table(new abap.types.String(), {\"withHeader\":false});\n    let iv_path = new abap.types.String();\n    if (INPUT && INPUT.iv_path) {iv_path.set(INPUT.iv_path);}\n    let ls_data = new abap.types.Structure({parent: new abap.types.String(), name: new abap.types.String(), full_name: new abap.types.String(), value: new abap.types.String()});\n    for (const unique7 of abap.statements.loop(this.mt_data,{where: (i) => {return abap.compare.eq(i.parent, iv_path);}})) {\n      ls_data.set(unique7);\n      abap.statements.append({source: ls_data.get().name, target: rt_members});\n    }\n    return rt_members;\n  }\n  async value_boolean(INPUT) {\n    let rv_value = new abap.types.Character();\n    let iv_path = new abap.types.String();\n    if (INPUT && INPUT.iv_path) {iv_path.set(INPUT.iv_path);}\n    rv_value.set(abap.builtin.boolc(abap.compare.eq(await this.value_string({iv_path: iv_path}), new abap.types.Character({length: 4}).set('true'))));\n    return rv_value;\n  }\n  async value_integer(INPUT) {\n    let rv_value = new abap.types.Integer();\n    let iv_path = new abap.types.String();\n    if (INPUT && INPUT.iv_path) {iv_path.set(INPUT.iv_path);}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return rv_value;\n  }\n  async value_number(INPUT) {\n    let rv_value = new abap.types.Integer();\n    let iv_path = new abap.types.String();\n    if (INPUT && INPUT.iv_path) {iv_path.set(INPUT.iv_path);}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return rv_value;\n  }\n  async value_string(INPUT) {\n    let rv_value = new abap.types.String();\n    let iv_path = new abap.types.String();\n    if (INPUT && INPUT.iv_path) {iv_path.set(INPUT.iv_path);}\n    let ls_data = new abap.types.Structure({parent: new abap.types.String(), name: new abap.types.String(), full_name: new abap.types.String(), value: new abap.types.String()});\n    abap.statements.readTable(this.mt_data,{into: ls_data,withKey: (i) => {return abap.compare.eq(i.full_name, iv_path);}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n      rv_value.set(ls_data.get().value);\n    }\n    return rv_value;\n  }\n}\nabap.Classes['ZCL_OAPI_JSON'] = zcl_oapi_json;\n\n__webpack_handle_async_dependencies__();\n}, 1);\n\n//# sourceURL=webpack://web/../output/zcl_oapi_json.clas.mjs?");

/***/ })

}]);
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_zcl_oapi_schema_clas_mjs"],{

/***/ "../output/zcl_oapi_schema.clas.mjs":
/*!******************************************!*\
  !*** ../output/zcl_oapi_schema.clas.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zcl_oapi_schema\": () => (/* binding */ zcl_oapi_schema)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// zcl_oapi_schema.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_1 = new abap.types.Integer().set(1);\nclass zcl_oapi_schema {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.zif_oapi_schema$type = new abap.types.String();\n    this.zif_oapi_schema$default_ = new abap.types.String();\n    this.zif_oapi_schema$properties = new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), ref: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_schema=>ty_property\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    this.zif_oapi_schema$items_ref = new abap.types.String();\n    return this;\n  }\n  async zif_oapi_schema$is_simple_type() {\n    let rv_simple = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    let lv_type = new abap.types.String();\n    lv_type.set(await this.zif_oapi_schema$get_simple_type());\n    rv_simple.set(abap.builtin.boolc(abap.compare.ne(lv_type, new abap.types.Character({length: 0}).set(''))));\n    return rv_simple;\n  }\n  async lookup_ref(INPUT) {\n    let rs_ref = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let iv_name = new abap.types.String();\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    let it_refs = new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    if (INPUT && INPUT.it_refs) {it_refs.set(INPUT.it_refs);}\n    let lv_name = new abap.types.String();\n    abap.statements.assert(abap.compare.initial(iv_name) === false);\n    lv_name.set(iv_name);\n    abap.statements.replace({target:lv_name, all:false, with: new abap.types.Character({length: 0}).set(''),of: new abap.types.Character({length: 21}).set('#/components/schemas/')});\n    abap.statements.readTable(it_refs,{into: rs_ref,withKey: (i) => {return abap.compare.eq(i.name, lv_name);}});\n    abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, constant_0));\n    return rs_ref;\n  }\n  async zif_oapi_schema$build_type_definition(INPUT) {\n    let rv_abap = new abap.types.String();\n    let iv_name = new abap.types.String();\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    let it_refs = new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    if (INPUT && INPUT.it_refs) {it_refs.set(INPUT.it_refs);}\n    let io_names = new abap.types.ABAPObject({qualifiedName: \"ZCL_OAPI_ABAP_NAME\"});\n    if (INPUT && INPUT.io_names) {io_names.set(INPUT.io_names);}\n    let ls_property = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), ref: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_schema=>ty_property\");\n    let ls_ref = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let lv_count = new abap.types.Integer();\n    let lv_name = new abap.types.String();\n    if (abap.compare.eq(this.zif_oapi_schema$type, new abap.types.Character({length: 6}).set('object'))) {\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`  TYPES: BEGIN OF ${iv_name.get()},\\n`)));\n      lv_count.set(constant_0);\n      for (const unique45 of abap.statements.loop(this.zif_oapi_schema$properties)) {\n        ls_property.set(unique45);\n        rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`           `),abap.operators.concat(ls_property.get().abap_name,new abap.types.String().set(` TYPE `)))));\n        if (abap.compare.initial(ls_property.get().schema)) {\n          ls_ref.set(await this.lookup_ref({iv_name: ls_property.get().ref, it_refs: it_refs}));\n          rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(ls_ref.get().abap_name,new abap.types.String().set(`,\\n`))));\n        } else if (abap.compare.eq(await ls_property.get().schema.get().zif_oapi_schema$is_simple_type(), abap.builtin.abap_true)) {\n          rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(await ls_property.get().schema.get().zif_oapi_schema$get_simple_type(),new abap.types.String().set(`,\\n`))));\n        } else if (abap.compare.eq(ls_property.get().schema.get().zif_oapi_schema$type, new abap.types.Character({length: 5}).set('array'))) {\n          rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`STANDARD TABLE OF string WITH DEFAULT KEY, \" todo, handle array\\n`)));\n        } else {\n          lv_name.set(await io_names.get().to_abap_name({iv_name: abap.operators.concat(new abap.types.Character({length: 3}).set('sub'),abap.operators.concat(iv_name,abap.operators.concat(new abap.types.Character({length: 1}).set('_'),ls_property.get().abap_name)))}));\n          rv_abap.set(abap.operators.concat(await ls_property.get().schema.get().zif_oapi_schema$build_type_definition({iv_name: lv_name, io_names: io_names, it_refs: it_refs}),abap.operators.concat(rv_abap,abap.operators.concat(lv_name,new abap.types.String().set(`,\\n`)))));\n        }\n        lv_count.set(abap.operators.add(lv_count,constant_1));\n      }\n      if (abap.compare.eq(lv_count, constant_0)) {\n        rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`           dummy_workaround TYPE i,\\n`)));\n      }\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`         END OF ${iv_name.get()}.\\n`)));\n    } else if (abap.compare.eq(this.zif_oapi_schema$type, new abap.types.Character({length: 5}).set('array')) && abap.compare.initial(this.zif_oapi_schema$items_ref) === false) {\n      ls_ref.set(await this.lookup_ref({iv_name: this.zif_oapi_schema$items_ref, it_refs: it_refs}));\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`  TYPES ${iv_name.get()} TYPE STANDARD TABLE OF ${ls_ref.get().abap_name.get()} WITH DEFAULT KEY.\\n`)));\n    } else if (abap.compare.eq(await this.zif_oapi_schema$is_simple_type(), abap.builtin.abap_true)) {\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`  TYPES ${iv_name.get()} TYPE ${(await this.zif_oapi_schema$get_simple_type()).get()}.\\n`)));\n    } else {\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`  TYPES ${iv_name.get()} TYPE string. \" ${this.zif_oapi_schema$type.get()} ${this.zif_oapi_schema$items_ref.get()} todo\\n`)));\n    }\n    return rv_abap;\n  }\n  async zif_oapi_schema$get_simple_type() {\n    let rv_simple = new abap.types.String();\n    let unique46 = this.zif_oapi_schema$type;\n    if (abap.compare.eq(unique46, new abap.types.Character({length: 7}).set('integer'))) {\n      rv_simple.set(new abap.types.Character({length: 1}).set('i'));\n    } else if (abap.compare.eq(unique46, new abap.types.Character({length: 6}).set('number'))) {\n      rv_simple.set(new abap.types.Character({length: 1}).set('f'));\n    } else if (abap.compare.eq(unique46, new abap.types.Character({length: 6}).set('string'))) {\n      rv_simple.set(new abap.types.Character({length: 6}).set('string'));\n    } else if (abap.compare.eq(unique46, new abap.types.Character({length: 7}).set('boolean'))) {\n      rv_simple.set(new abap.types.Character({length: 9}).set('abap_bool'));\n    }\n    return rv_simple;\n  }\n}\nabap.Classes['ZCL_OAPI_SCHEMA'] = zcl_oapi_schema;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://web/../output/zcl_oapi_schema.clas.mjs?");

/***/ })

}]);
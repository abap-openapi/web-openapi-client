"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_zcl_oapi_abap_name_clas_mjs"],{

/***/ "../output/zcl_oapi_abap_name.clas.mjs":
/*!*********************************************!*\
  !*** ../output/zcl_oapi_abap_name.clas.mjs ***!
  \*********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zcl_oapi_abap_name\": () => (/* binding */ zcl_oapi_abap_name)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// zcl_oapi_abap_name.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_1 = new abap.types.Integer().set(1);\nconst constant_2 = new abap.types.Integer().set(2);\nconst constant_28 = new abap.types.Integer().set(28);\nconst constant_30 = new abap.types.Integer().set(30);\nconst constant_99 = new abap.types.Integer().set(99);\nclass zcl_oapi_abap_name {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mt_used = new abap.types.Table(new abap.types.String(), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    return this;\n  }\n  async add_used(INPUT) {\n    let iv_name = new abap.types.String();\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    abap.statements.readTable(this.mt_used,{withKey: (i) => {return abap.compare.eq(i.table_line, iv_name);}});\n    abap.statements.assert(abap.compare.ne(abap.builtin.sy.get().subrc, constant_0));\n    abap.statements.append({source: iv_name, target: this.mt_used});\n  }\n  async numbering(INPUT) {\n    let rv_name = new abap.types.Character({length: 30, qualifiedName: \"undefined\"});\n    let iv_name = new abap.types.String();\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    let lv_number = new abap.types.Numc({length: 2});\n    let lv_offset = new abap.types.Integer();\n    lv_offset.set(abap.builtin.strlen({val: iv_name}));\n    if (abap.compare.gt(lv_offset, constant_28)) {\n      lv_offset.set(constant_28);\n    }\n    const unique10 = constant_99.get();\n    for (let unique11 = 0; unique11 < unique10; unique11++) {\n      abap.builtin.sy.get().index.set(unique11 + 1);\n      lv_number.set(abap.builtin.sy.get().index);\n      rv_name.set(iv_name);\n      new abap.OffsetLength(rv_name, {offset: lv_offset.get()}).set(lv_number);\n      abap.statements.readTable(this.mt_used,{withKey: (i) => {return abap.compare.eq(i.table_line, rv_name);}});\n      if (abap.compare.ne(abap.builtin.sy.get().subrc, constant_0)) {\n        return rv_name;\n      }\n    }\n    abap.statements.assert(abap.compare.eq(constant_0, constant_1));\n    return rv_name;\n  }\n  async to_abap_name(INPUT) {\n    let rv_name = new abap.types.String();\n    let iv_name = new abap.types.String();\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    if (abap.compare.initial(iv_name)) {\n      return rv_name;\n    }\n    rv_name.set(abap.builtin.to_lower({val: iv_name}));\n    abap.statements.replace({target:rv_name, all:true, with: new abap.types.Character({length: 1}).set('_'),of: new abap.types.Character({length: 1}).set('-')});\n    abap.statements.replace({target:rv_name, all:true, with: new abap.types.Character({length: 1}).set('_'),of: new abap.types.String().set(` `)});\n    abap.statements.replace({target:rv_name, all:true, with: new abap.types.Character({length: 1}).set('_'),of: new abap.types.Character({length: 1}).set('.')});\n    abap.statements.replace({target:rv_name, all:true, with: new abap.types.Character({length: 1}).set('_'),of: new abap.types.Character({length: 1}).set('/')});\n    abap.statements.replace({target:rv_name, all:true, with: new abap.types.Character({length: 0}).set(''),of: new abap.types.Character({length: 1}).set('@')});\n    abap.statements.replace({target:rv_name, all:true, with: new abap.types.Character({length: 0}).set(''),of: new abap.types.Character({length: 1}).set('+')});\n    if (abap.compare.co(rv_name, new abap.types.Character({length: 10}).set('0123456789'))) {\n      rv_name.set(abap.operators.concat(new abap.types.Character({length: 1}).set('n'),rv_name));\n    }\n    if (abap.compare.gt(abap.builtin.strlen({val: rv_name}), constant_30)) {\n      rv_name.set(rv_name.getOffset({length: 30}));\n    }\n    abap.statements.readTable(this.mt_used,{withKey: (i) => {return abap.compare.eq(i.table_line, rv_name);}});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n      rv_name.set(await this.numbering({iv_name: rv_name}));\n    }\n    abap.statements.append({source: rv_name, target: this.mt_used});\n    return rv_name;\n  }\n}\nabap.Classes['ZCL_OAPI_ABAP_NAME'] = zcl_oapi_abap_name;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://web/../output/zcl_oapi_abap_name.clas.mjs?");

/***/ })

}]);
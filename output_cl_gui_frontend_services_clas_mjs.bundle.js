/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_cl_gui_frontend_services_clas_mjs"],{

/***/ "../output/cl_gui_frontend_services.clas.mjs":
/*!***************************************************!*\
  !*** ../output/cl_gui_frontend_services.clas.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_gui_frontend_services\": () => (/* binding */ cl_gui_frontend_services)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// cl_gui_frontend_services.clas.abap\nconst constant_1 = new abap.types.Integer().set(1);\nconst constant_2 = new abap.types.Integer().set(2);\nconst constant_3 = new abap.types.Integer().set(3);\nconst constant_4 = new abap.types.Integer().set(4);\nconst constant_5 = new abap.types.Integer().set(5);\nconst constant_6 = new abap.types.Integer().set(6);\nclass cl_gui_frontend_services {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.filetype_all = cl_gui_frontend_services.filetype_all;\n    this.action_cancel = cl_gui_frontend_services.action_cancel;\n    this.platform_nt351 = cl_gui_frontend_services.platform_nt351;\n    this.platform_nt40 = cl_gui_frontend_services.platform_nt40;\n    this.platform_nt50 = cl_gui_frontend_services.platform_nt50;\n    this.platform_windows95 = cl_gui_frontend_services.platform_windows95;\n    this.platform_windows98 = cl_gui_frontend_services.platform_windows98;\n    this.platform_windowsxp = cl_gui_frontend_services.platform_windowsxp;\n    return this;\n  }\n  async gui_download(INPUT) {\n    return cl_gui_frontend_services.gui_download(INPUT);\n  }\n  static async gui_download(INPUT) {\n    let bin_filesize = new abap.types.Integer();\n    if (INPUT && INPUT.bin_filesize) {bin_filesize.set(INPUT.bin_filesize);}\n    let filename = new abap.types.String();\n    if (INPUT && INPUT.filename) {filename.set(INPUT.filename);}\n    let filetype = new abap.types.String();\n    if (INPUT && INPUT.filetype) {filetype.set(INPUT.filetype);}\n    let data_tab = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.data_tab) {data_tab = INPUT.data_tab;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 26}).set('gui_download not supported')));\n  }\n  async gui_upload(INPUT) {\n    return cl_gui_frontend_services.gui_upload(INPUT);\n  }\n  static async gui_upload(INPUT) {\n    let filename = new abap.types.String();\n    if (INPUT && INPUT.filename) {filename.set(INPUT.filename);}\n    let filetype = new abap.types.String();\n    if (INPUT && INPUT.filetype) {filetype.set(INPUT.filetype);}\n    let filelength = new abap.types.Integer();\n    if (INPUT && INPUT.filelength) {filelength = INPUT.filelength;}\n    let data_tab = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.data_tab) {data_tab = INPUT.data_tab;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 24}).set('gui_upload not supported')));\n  }\n  async file_open_dialog(INPUT) {\n    return cl_gui_frontend_services.file_open_dialog(INPUT);\n  }\n  static async file_open_dialog(INPUT) {\n    let window_title = new abap.types.String();\n    if (INPUT && INPUT.window_title) {window_title.set(INPUT.window_title);}\n    let default_filename = new abap.types.String();\n    if (INPUT && INPUT.default_filename) {default_filename.set(INPUT.default_filename);}\n    let file_filter = new abap.types.String();\n    if (INPUT && INPUT.file_filter) {file_filter.set(INPUT.file_filter);}\n    let file_table = new abap.types.Table(new abap.types.Structure({filename: new abap.types.Character({length: 1024})}));\n    if (INPUT && INPUT.file_table) {file_table = INPUT.file_table;}\n    let rc = new abap.types.Integer();\n    if (INPUT && INPUT.rc) {rc = INPUT.rc;}\n    let user_action = new abap.types.Integer();\n    if (INPUT && INPUT.user_action) {user_action = INPUT.user_action;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 30}).set('file_open_dialog not supported')));\n  }\n  async file_save_dialog(INPUT) {\n    return cl_gui_frontend_services.file_save_dialog(INPUT);\n  }\n  static async file_save_dialog(INPUT) {\n    let window_title = new abap.types.String();\n    if (INPUT && INPUT.window_title) {window_title.set(INPUT.window_title);}\n    let default_extension = new abap.types.String();\n    if (INPUT && INPUT.default_extension) {default_extension.set(INPUT.default_extension);}\n    let default_file_name = new abap.types.String();\n    if (INPUT && INPUT.default_file_name) {default_file_name.set(INPUT.default_file_name);}\n    let file_filter = new abap.types.String();\n    if (INPUT && INPUT.file_filter) {file_filter.set(INPUT.file_filter);}\n    let filename = new abap.types.String();\n    if (INPUT && INPUT.filename) {filename = INPUT.filename;}\n    let path = new abap.types.String();\n    if (INPUT && INPUT.path) {path = INPUT.path;}\n    let fullpath = new abap.types.String();\n    if (INPUT && INPUT.fullpath) {fullpath = INPUT.fullpath;}\n    let user_action = new abap.types.Integer();\n    if (INPUT && INPUT.user_action) {user_action = INPUT.user_action;}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 30}).set('file_save_dialog not supported')));\n  }\n  async get_platform() {\n    return cl_gui_frontend_services.get_platform();\n  }\n  static async get_platform() {\n    let platform = new abap.types.Integer();\n    platform.set(cl_gui_frontend_services.platform_windowsxp);\n    return platform;\n  }\n}\nabap.Classes['CL_GUI_FRONTEND_SERVICES'] = cl_gui_frontend_services;\ncl_gui_frontend_services.filetype_all = new abap.types.String();\ncl_gui_frontend_services.filetype_all.set('abc');\ncl_gui_frontend_services.action_cancel = new abap.types.Integer();\ncl_gui_frontend_services.action_cancel.set(1);\ncl_gui_frontend_services.platform_nt351 = new abap.types.Integer();\ncl_gui_frontend_services.platform_nt351.set(1);\ncl_gui_frontend_services.platform_nt40 = new abap.types.Integer();\ncl_gui_frontend_services.platform_nt40.set(2);\ncl_gui_frontend_services.platform_nt50 = new abap.types.Integer();\ncl_gui_frontend_services.platform_nt50.set(3);\ncl_gui_frontend_services.platform_windows95 = new abap.types.Integer();\ncl_gui_frontend_services.platform_windows95.set(4);\ncl_gui_frontend_services.platform_windows98 = new abap.types.Integer();\ncl_gui_frontend_services.platform_windows98.set(5);\ncl_gui_frontend_services.platform_windowsxp = new abap.types.Integer();\ncl_gui_frontend_services.platform_windowsxp.set(6);\n\n__webpack_handle_async_dependencies__();\n}, 1);\n\n//# sourceURL=webpack://web/../output/cl_gui_frontend_services.clas.mjs?");

/***/ })

}]);
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_cl_http_client_clas_mjs"],{

/***/ "../output/cl_http_client.clas.mjs":
/*!*****************************************!*\
  !*** ../output/cl_http_client.clas.mjs ***!
  \*****************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_http_client\": () => (/* binding */ cl_http_client)\n/* harmony export */ });\nawait __webpack_require__.e(/*! import() */ \"output_cl_http_client_clas_locals_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cl_http_client.clas.locals.mjs */ \"../output/cl_http_client.clas.locals.mjs\"));\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// cl_http_client.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_1 = new abap.types.Integer().set(1);\nconst constant_2 = new abap.types.Integer().set(2);\nclass cl_http_client {\n  async constructor_(INPUT) {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.mv_host = new abap.types.String();\n    this.if_http_client$request = new abap.types.ABAPObject();\n    this.if_http_client$response = new abap.types.ABAPObject();\n    this.if_http_client$propertytype_logon_popup = new abap.types.Integer();\n    this.if_http_client$co_disabled = new abap.types.Integer();\n    let url = new abap.types.String();\n    if (INPUT && INPUT.url) {url.set(INPUT.url);}\n    let lv_uri = new abap.types.String();\n    let lv_query = new abap.types.String();\n    this.if_http_client$response.set(await (new abap.Classes['CLAS-CL_HTTP_CLIENT-LCL_RESPONSE']()).constructor_());\n    abap.statements.find(url, {regex: new abap.types.Character({length: 19}).set('\\\\w(\\\\/[\\\\w\\\\d\\\\.\\\\-\\\\/]+)'), submatches: [lv_uri]});\n    this.mv_host.set(url);\n    abap.statements.replace(this.mv_host, false, lv_uri, new abap.types.Character({length: 0}).set(''));\n    this.if_http_client$request.set(await (new abap.Classes['CLAS-CL_HTTP_CLIENT-LCL_REQUEST']()).constructor_({uri: lv_uri}));\n    abap.statements.find(url, {regex: new abap.types.Character({length: 6}).set('\\\\?(.*)'), submatches: [lv_query]});\n    if (abap.compare.eq(abap.builtin.sy.get().subrc, constant_0)) {\n      await abap.Classes['CL_HTTP_UTILITY'].set_query({request: this.if_http_client$request, query: lv_query});\n    }\n    return this;\n  }\n  async create_by_url(INPUT) {\n    return cl_http_client.create_by_url(INPUT);\n  }\n  static async create_by_url(INPUT) {\n    let url = new abap.types.String();\n    if (INPUT && INPUT.url) {url.set(INPUT.url);}\n    let ssl_id = new abap.types.String();\n    if (INPUT && INPUT.ssl_id) {ssl_id.set(INPUT.ssl_id);}\n    let proxy_host = new abap.types.String();\n    if (INPUT && INPUT.proxy_host) {proxy_host.set(INPUT.proxy_host);}\n    let proxy_service = new abap.types.String();\n    if (INPUT && INPUT.proxy_service) {proxy_service.set(INPUT.proxy_service);}\n    let client = new abap.types.ABAPObject();\n    if (INPUT && INPUT.client) {client = INPUT.client;}\n    client.set(await (new abap.Classes['CL_HTTP_CLIENT']()).constructor_({url: url}));\n  }\n  async if_http_client$authenticate(INPUT) {\n    let proxy_authentication = new abap.types.Character();\n    if (INPUT && INPUT.proxy_authentication) {proxy_authentication.set(INPUT.proxy_authentication);}\n    let username = new abap.types.String();\n    if (INPUT && INPUT.username) {username.set(INPUT.username);}\n    let password = new abap.types.String();\n    if (INPUT && INPUT.password) {password.set(INPUT.password);}\n    let lv_base64 = new abap.types.String();\n    lv_base64.set(await abap.Classes['CL_HTTP_UTILITY'].encode_base64({data: `${username.get()}:${password.get()}`}));\n    await this.if_http_client$request.get().if_http_request$set_header_field({name: new abap.types.Character({length: 13}).set('authorization'), value: `Basic ${lv_base64.get()}`});\n  }\n  async if_http_client$close() {\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n  }\n  async if_http_client$send() {\n    let lv_method = new abap.types.String();\n    let lv_url = new abap.types.String();\n    let lv_body = new abap.types.String();\n    let lt_form_fields = new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), value: new abap.types.String()}));\n    let lt_header_fields = new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), value: new abap.types.String()}));\n    let ls_field = new abap.types.Structure({name: new abap.types.String(), value: new abap.types.String()});\n    lv_method.set(await this.if_http_client$request.get().if_http_request$get_method());\n    if (abap.compare.initial(lv_method)) {\n      lv_method.set(new abap.types.Character({length: 3}).set('GET'));\n    }\n    lv_url.set(this.mv_host.get() + (await this.if_http_client$request.get().if_http_request$get_header_field({field: new abap.types.Character({length: 12}).set('~request_uri')})).get());\n    await this.if_http_client$request.get().if_http_request$get_form_fields({fields: lt_form_fields});\n    if (abap.compare.gt(abap.builtin.lines({val: lt_form_fields}), constant_0)) {\n      lv_url.set(lv_url.get() + '?' + (await abap.Classes['CL_HTTP_UTILITY'].fields_to_string({fields: lt_form_fields})).get());\n    }\n    await this.if_http_client$request.get().if_http_request$get_header_fields({fields: lt_header_fields});\n    let headers = {};\n    for (const unique47 of abap.statements.loop(lt_header_fields,{where: (i) => {return abap.compare.ne(i.name, new abap.types.Character({length: 12}).set('~request_uri'));}})) {\n      ls_field.set(unique47);\n      headers[ls_field.get().name.get()] = ls_field.get().value.get();\n    }\n    lv_body.set(await this.if_http_client$request.get().if_http_request$get_cdata());\n    let response = await globalThis.fetch(lv_url.get(), {method: lv_method.get(), headers: headers, body: lv_method.get() === \"GET\" ? undefined : lv_body.get()});\n    this.if_http_client$response.get().status.set(response.status);\n    this.if_http_client$response.get().cdata.set(await response.text());\n  }\n  async if_http_client$receive() {\n    return;\n  }\n  async if_http_client$get_last_error(INPUT) {\n    let code = new abap.types.Integer();\n    if (INPUT && INPUT.code) {code = INPUT.code;}\n    let message = new abap.types.String();\n    if (INPUT && INPUT.message) {message = INPUT.message;}\n    await this.if_http_client$response.get().if_http_response$get_status({code: code});\n    message.set(new abap.types.Character({length: 14}).set('todo_open_abap'));\n  }\n  async if_http_client$send_sap_logon_ticket() {\n    abap.statements.assert(abap.compare.eq(constant_2, new abap.types.Character({length: 13}).set('not supported')));\n  }\n}\nabap.Classes['CL_HTTP_CLIENT'] = cl_http_client;\n\n__webpack_handle_async_dependencies__();\n}, 1);\n\n//# sourceURL=webpack://web/../output/cl_http_client.clas.mjs?");

/***/ })

}]);
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_zcl_oapi_generator_v2_clas_mjs"],{

/***/ "../output/zcl_oapi_generator_v2.clas.mjs":
/*!************************************************!*\
  !*** ../output/zcl_oapi_generator_v2.clas.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"zcl_oapi_generator_v2\": () => (/* binding */ zcl_oapi_generator_v2)\n/* harmony export */ });\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// zcl_oapi_generator_v2.clas.abap\nconst constant_30 = new abap.types.Integer().set(30);\nclass zcl_oapi_generator_v2 {\n  async constructor_() {\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.ms_specification = new abap.types.Structure({openapi: new abap.types.String(), info: new abap.types.Structure({title: new abap.types.String(), version: new abap.types.String(), description: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_info\"), servers: new abap.types.Table(new abap.types.Structure({url: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_server\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), operations: new abap.types.Table(new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), components: new abap.types.Structure({schemas: new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), examples: new abap.types.String(), request_bodies: new abap.types.String(), headers: new abap.types.String(), security_schemas: new abap.types.String(), links: new abap.types.String(), callbacks: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_components\")}, \"zif_oapi_specification_v3=>ty_specification\");\n    this.ms_input = new abap.types.Structure({clas_icf_serv: new abap.types.Character({length: 30, qualifiedName: \"zcl_oapi_generator_v2=>clas_icf_serv\"}), clas_icf_impl: new abap.types.Character({length: 30, qualifiedName: \"zcl_oapi_generator_v2=>clas_icf_impl\"}), clas_client: new abap.types.Character({length: 30, qualifiedName: \"zcl_oapi_generator_v2=>clas_client\"}), intf: new abap.types.Character({length: 30, qualifiedName: \"zcl_oapi_generator_v2=>intf\"}), openapi_json: new abap.types.String()}, \"zcl_oapi_generator_v2=>ty_input\");\n    return this;\n  }\n  async find_schema(INPUT) {\n    let rs_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    let iv_name = new abap.types.String();\n    if (INPUT && INPUT.iv_name) {iv_name.set(INPUT.iv_name);}\n    let lv_name = new abap.types.String();\n    lv_name.set(iv_name);\n    abap.statements.replace({target:lv_name, all:false, with: new abap.types.Character({length: 0}).set(''),of: new abap.types.Character({length: 21}).set('#/components/schemas/')});\n    abap.statements.readTable(this.ms_specification.get().components.get().schemas,{into: rs_schema,withKey: (i) => {return abap.compare.eq(i.name, lv_name);}});\n    return rs_schema;\n  }\n  async run(INPUT) {\n    let rs_result = new abap.types.Structure({clas_icf_serv: new abap.types.String(), clas_icf_impl: new abap.types.String(), clas_client: new abap.types.String(), intf: new abap.types.String()}, \"zcl_oapi_generator_v2=>ty_result\");\n    let is_input = new abap.types.Structure({clas_icf_serv: new abap.types.Character({length: 30, qualifiedName: \"zcl_oapi_generator_v2=>clas_icf_serv\"}), clas_icf_impl: new abap.types.Character({length: 30, qualifiedName: \"zcl_oapi_generator_v2=>clas_icf_impl\"}), clas_client: new abap.types.Character({length: 30, qualifiedName: \"zcl_oapi_generator_v2=>clas_client\"}), intf: new abap.types.Character({length: 30, qualifiedName: \"zcl_oapi_generator_v2=>intf\"}), openapi_json: new abap.types.String()}, \"zcl_oapi_generator_v2=>ty_input\");\n    if (INPUT && INPUT.is_input) {is_input.set(INPUT.is_input);}\n    let lo_parser = new abap.types.ABAPObject({qualifiedName: \"ZCL_OAPI_PARSER\"});\n    let lo_references = new abap.types.ABAPObject({qualifiedName: \"ZCL_OAPI_REFERENCES\"});\n    this.ms_input.set(is_input);\n    lo_parser.set(await (new abap.Classes['ZCL_OAPI_PARSER']()).constructor_());\n    this.ms_specification.set((await lo_parser.get().parse({iv_json: is_input.get().openapi_json})));\n    lo_references.set(await (new abap.Classes['ZCL_OAPI_REFERENCES']()).constructor_());\n    this.ms_specification.set((await lo_references.get().normalize({is_spec: this.ms_specification})));\n    rs_result.get().clas_icf_serv.set((await this.build_clas_icf_serv()));\n    rs_result.get().clas_icf_impl.set((await this.build_clas_icf_impl()));\n    rs_result.get().clas_client.set((await this.build_clas_client()));\n    rs_result.get().intf.set((await this.build_intf()));\n    return rs_result;\n  }\n  async build_clas_icf_serv() {\n    let rv_abap = new abap.types.String();\n    let ls_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    let lv_parameters = new abap.types.String();\n    let lv_typename = new abap.types.String();\n    let lv_post = new abap.types.String();\n    let lv_pre = new abap.types.String();\n    let ls_response = new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\");\n    let ls_content = new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\");\n    let ls_parameter = new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\");\n    rv_abap.set(abap.operators.concat(new abap.types.String().set(`CLASS ${this.ms_input.get().clas_icf_serv.get()} DEFINITION PUBLIC.\\n`),abap.operators.concat(new abap.types.String().set(`* Auto generated by https://github.com/abap-openapi/abap-openapi\\n`),abap.operators.concat(new abap.types.String().set(`  PUBLIC SECTION.\\n`),abap.operators.concat(new abap.types.String().set(`    INTERFACES if_http_extension.\\n`),new abap.types.String().set(`  PRIVATE SECTION.\\n`))))));\n    rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`ENDCLASS.\\n\\n`),new abap.types.String().set(`CLASS ${this.ms_input.get().clas_icf_serv.get()} IMPLEMENTATION.\\n`))));\n    rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`  METHOD if_http_extension~handle_request.\\n`),abap.operators.concat(new abap.types.String().set(`    DATA li_handler TYPE REF TO ${this.ms_input.get().intf.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`    DATA lv_method  TYPE string.\\n`),abap.operators.concat(new abap.types.String().set(`    DATA lv_path    TYPE string.\\n\\n`),abap.operators.concat(new abap.types.String().set(`    CREATE OBJECT li_handler TYPE ${this.ms_input.get().clas_icf_impl.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`    lv_path = server->request->get_header_field( '~path' ).\\n`),new abap.types.String().set(`    lv_method = server->request->get_method( ).\\n\\n`)))))))));\n    for (const unique53 of abap.statements.loop(this.ms_specification.get().operations)) {\n      ls_operation.set(unique53);\n      rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`    TRY.\\n`),new abap.types.String().set(`        IF lv_path = '${ls_operation.get().path.get()}' AND lv_method = '${abap.builtin.to_upper({val: ls_operation.get().method}).get()}'.\\n`))));\n      abap.statements.clear(lv_parameters);\n      for (const unique54 of abap.statements.loop(ls_operation.get().parameters,{where: (i) => {return abap.compare.eq(i.in_, new abap.types.Character({length: 5}).set('query'));}})) {\n        ls_parameter.set(unique54);\n        lv_parameters.set(abap.operators.concat(lv_parameters,new abap.types.String().set(`\\n            ${ls_parameter.get().abap_name.get()} = server->request->get_form_field( '${ls_parameter.get().name.get()}' )`)));\n      }\n      if (abap.compare.initial(ls_operation.get().body_schema_ref) === false) {\n        rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`          DATA ${ls_operation.get().abap_name.get()} TYPE ${this.ms_input.get().intf.get()}=>${((await this.find_schema({iv_name: ls_operation.get().body_schema_ref}))).get().abap_name.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`          /ui2/cl_json=>deserialize(\\n`),abap.operators.concat(new abap.types.String().set(`            EXPORTING\\n`),abap.operators.concat(new abap.types.String().set(`              json = server->request->get_cdata( )\\n`),abap.operators.concat(new abap.types.String().set(`            CHANGING\\n`),new abap.types.String().set(`              data = ${ls_operation.get().abap_name.get()} ).\\n`))))))));\n        lv_parameters.set(abap.operators.concat(lv_parameters,new abap.types.String().set(`\\n            body = ${ls_operation.get().abap_name.get()}`)));\n      }\n      lv_typename.set(abap.operators.concat(new abap.types.Character({length: 4}).set('ret_'),ls_operation.get().abap_name));\n      abap.statements.clear(lv_post);\n      for (const unique55 of abap.statements.loop(ls_operation.get().responses)) {\n        ls_response.set(unique55);\n        for (const unique56 of abap.statements.loop(ls_response.get().content)) {\n          ls_content.set(unique56);\n          lv_post.set(abap.operators.concat(lv_post,abap.operators.concat(new abap.types.String().set(`          IF ${lv_typename.get()}-${ls_response.get().code.get()} IS NOT INITIAL.\\n`),abap.operators.concat(new abap.types.String().set(`            server->response->set_content_type( '${ls_content.get().type.get()}' ).\\n`),abap.operators.concat(new abap.types.String().set(`            server->response->set_cdata( /ui2/cl_json=>serialize( ${lv_typename.get()}-${ls_response.get().code.get()} ) ).\\n`),abap.operators.concat(new abap.types.String().set(`            server->response->set_status( code = ${ls_response.get().code.get()} reason = '${ls_response.get().description.get()}' ).\\n`),abap.operators.concat(new abap.types.String().set(`            RETURN.\\n`),new abap.types.String().set(`          ENDIF.\\n`))))))));\n        }\n      }\n      if (abap.compare.initial(lv_post) === false) {\n        lv_pre.set(abap.operators.concat(new abap.types.String().set(`          DATA ${lv_typename.get()} TYPE ${this.ms_input.get().intf.get()}=>${lv_typename.get()}.\\n`),new abap.types.String().set(`          ${lv_typename.get()} = `)));\n      } else {\n        lv_pre.set(new abap.types.String().set(`          `));\n        lv_post.set(new abap.types.String().set(`          RETURN.\\n`));\n      }\n      rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(lv_pre,abap.operators.concat(new abap.types.String().set(`li_handler->${ls_operation.get().abap_name.get()}(${lv_parameters.get()} ).\\n`),abap.operators.concat(lv_post,abap.operators.concat(new abap.types.String().set(`        ENDIF.\\n`),abap.operators.concat(new abap.types.String().set(`      CATCH cx_static_check.\\n`),abap.operators.concat(new abap.types.String().set(`        server->response->set_content_type( 'text/plain' ).\\n`),abap.operators.concat(new abap.types.String().set(`        server->response->set_cdata( 'exception' ).\\n`),abap.operators.concat(new abap.types.String().set(`        server->response->set_status( code = 500 reason = 'Error' ).\\n`),new abap.types.String().set(`    ENDTRY.\\n`)))))))))));\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.String().set(`    server->response->set_content_type( 'text/plain' ).\\n`),abap.operators.concat(new abap.types.String().set(`    server->response->set_cdata( 'no handler found' ).\\n`),abap.operators.concat(new abap.types.String().set(`    server->response->set_status( code = 500 reason = 'Error' ).\\n`),abap.operators.concat(new abap.types.String().set(`  ENDMETHOD.\\n`),new abap.types.String().set(`ENDCLASS.`))))))));\n    return rv_abap;\n  }\n  async build_clas_icf_impl() {\n    let rv_abap = new abap.types.String();\n    let ls_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    rv_abap.set(abap.operators.concat(new abap.types.String().set(`CLASS ${this.ms_input.get().clas_icf_impl.get()} DEFINITION PUBLIC.\\n`),abap.operators.concat(new abap.types.String().set(`  PUBLIC SECTION.\\n`),abap.operators.concat(new abap.types.String().set(`    INTERFACES ${this.ms_input.get().intf.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`ENDCLASS.\\n\\n`),new abap.types.String().set(`CLASS ${this.ms_input.get().clas_icf_impl.get()} IMPLEMENTATION.\\n\\n`))))));\n    for (const unique57 of abap.statements.loop(this.ms_specification.get().operations)) {\n      ls_operation.set(unique57);\n      rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`  METHOD ${this.ms_input.get().intf.get()}~${ls_operation.get().abap_name.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`* Add implementation logic here\\n`),new abap.types.String().set(`  ENDMETHOD.\\n\\n`)))));\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`ENDCLASS.`)));\n    return rv_abap;\n  }\n  async build_clas_client() {\n    let rv_abap = new abap.types.String();\n    let ls_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    rv_abap.set(abap.operators.concat(new abap.types.String().set(`CLASS ${this.ms_input.get().clas_client.get()} DEFINITION PUBLIC.\\n`),abap.operators.concat(new abap.types.String().set(`* Auto generated by https://github.com/abap-openapi/abap-openapi\\n`),abap.operators.concat(new abap.types.String().set(`  PUBLIC SECTION.\\n`),abap.operators.concat(new abap.types.String().set(`    INTERFACES ${this.ms_input.get().intf.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`    METHODS constructor\\n`),abap.operators.concat(new abap.types.String().set(`      IMPORTING\\n`),abap.operators.concat(new abap.types.String().set(`        iv_url    TYPE string\\n`),abap.operators.concat(new abap.types.String().set(`        iv_ssl_id TYPE ssfapplssl OPTIONAL.\\n`),abap.operators.concat(new abap.types.String().set(`  PROTECTED SECTION.\\n`),abap.operators.concat(new abap.types.String().set(`    DATA mi_client TYPE REF TO if_http_client.\\n`),abap.operators.concat(new abap.types.String().set(`ENDCLASS.\\n\\n`),abap.operators.concat(new abap.types.String().set(`CLASS ${this.ms_input.get().clas_client.get()} IMPLEMENTATION.\\n`),abap.operators.concat(new abap.types.String().set(`  METHOD constructor.\\n`),abap.operators.concat(new abap.types.String().set(`    cl_http_client=>create_by_url(\\n`),abap.operators.concat(new abap.types.String().set(`      EXPORTING\\n`),abap.operators.concat(new abap.types.String().set(`        url    = iv_url\\n`),abap.operators.concat(new abap.types.String().set(`        ssl_id = iv_ssl_id\\n`),abap.operators.concat(new abap.types.String().set(`      IMPORTING\\n`),abap.operators.concat(new abap.types.String().set(`        client = mi_client ).\\n`),new abap.types.String().set(`  ENDMETHOD.\\n\\n`)))))))))))))))))))));\n    for (const unique58 of abap.statements.loop(this.ms_specification.get().operations)) {\n      ls_operation.set(unique58);\n      rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(new abap.types.String().set(`  METHOD ${this.ms_input.get().intf.get()}~${ls_operation.get().abap_name.get()}.\\n`),abap.operators.concat(new abap.types.String().set(`    DATA lv_code TYPE i.\\n`),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.String().set(`    mi_client->request->set_method( '${abap.builtin.to_upper({val: ls_operation.get().method}).get()}' ).\\n`),abap.operators.concat(new abap.types.String().set(`    mi_client->request->set_data( '112233AABBCCDDEEFF' ).\\n`),abap.operators.concat(new abap.types.String().set(`    mi_client->send( ).\\n`),abap.operators.concat(new abap.types.String().set(`    mi_client->receive( ).\\n`),abap.operators.concat(new abap.types.String().set(`\\n`),abap.operators.concat(new abap.types.String().set(`    mi_client->response->get_status( IMPORTING code = lv_code ).\\n`),abap.operators.concat(new abap.types.String().set(`    mi_client->response->get_data( ).\\n`),abap.operators.concat(new abap.types.String().set(`* todo\\n`),new abap.types.String().set(`  ENDMETHOD.\\n\\n`))))))))))))));\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`ENDCLASS.`)));\n    return rv_abap;\n  }\n  async build_intf() {\n    let rv_abap = new abap.types.String();\n    let ls_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    let ls_returning = new abap.types.Structure({abap: new abap.types.String(), type: new abap.types.String()}, \"zcl_oapi_generator_v2=>ty_returning\");\n    let ls_component_schema = new abap.types.Structure({name: new abap.types.String(), abap_name: new abap.types.String(), abap_parser_method: new abap.types.String(), abap_json_method: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"})}, \"zif_oapi_specification_v3=>ty_component_schema\");\n    rv_abap.set(abap.operators.concat(new abap.types.String().set(`INTERFACE ${this.ms_input.get().intf.get()} PUBLIC.\\n`),new abap.types.String().set(`* Auto generated by https://github.com/abap-openapi/abap-openapi\\n\\n`)));\n    for (const unique59 of abap.statements.loop(this.ms_specification.get().components.get().schemas)) {\n      ls_component_schema.set(unique59);\n      rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`* ${ls_component_schema.get().name.get()}\\n`)));\n      rv_abap.set(abap.operators.concat(rv_abap,(await ls_component_schema.get().schema.get().zif_oapi_schema$build_type_definition2({iv_name: ls_component_schema.get().abap_name, is_specification: this.ms_specification}))));\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`\\n`)));\n    for (const unique60 of abap.statements.loop(this.ms_specification.get().operations)) {\n      ls_operation.set(unique60);\n      ls_returning.set((await this.find_returning_parameter({is_operation: ls_operation})));\n      rv_abap.set(abap.operators.concat(rv_abap,abap.operators.concat(ls_returning.get().type,new abap.types.String().set(`  METHODS ${ls_operation.get().abap_name.get()}${(await this.find_input_parameters({is_operation: ls_operation})).get()}${ls_returning.get().abap.get()}\\n    RAISING\\n      cx_static_check.\\n`))));\n    }\n    rv_abap.set(abap.operators.concat(rv_abap,new abap.types.String().set(`ENDINTERFACE.`)));\n    return rv_abap;\n  }\n  async find_input_parameters(INPUT) {\n    let rv_abap = new abap.types.String();\n    let is_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    if (INPUT && INPUT.is_operation) {is_operation.set(INPUT.is_operation);}\n    let lt_list = new abap.types.Table(new abap.types.String(), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    let lv_str = new abap.types.String();\n    let ls_parameter = new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\");\n    for (const unique61 of abap.statements.loop(is_operation.get().parameters,{where: (i) => {return abap.compare.eq(i.in_, new abap.types.Character({length: 5}).set('query'));}})) {\n      ls_parameter.set(unique61);\n      lv_str.set(new abap.types.String().set(`      ${ls_parameter.get().abap_name.get()} TYPE ${(await ls_parameter.get().schema.get().zif_oapi_schema$get_simple_type()).get()}`));\n      abap.statements.append({source: lv_str, target: lt_list});\n    }\n    if (abap.compare.initial(is_operation.get().body_schema_ref) === false) {\n      lv_str.set(new abap.types.String().set(`      body TYPE ${((await this.find_schema({iv_name: is_operation.get().body_schema_ref}))).get().abap_name.get()}`));\n      abap.statements.append({source: lv_str, target: lt_list});\n    }\n    rv_abap.set(abap.builtin.concat_lines_of({table: lt_list, sep: new abap.types.String().set(`\\n`)}));\n    if (abap.compare.initial(rv_abap) === false) {\n      rv_abap.set(new abap.types.String().set(`\\n    IMPORTING\\n${rv_abap.get()}`));\n    }\n    return rv_abap;\n  }\n  async find_returning_parameter(INPUT) {\n    let rs_returning = new abap.types.Structure({abap: new abap.types.String(), type: new abap.types.String()}, \"zcl_oapi_generator_v2=>ty_returning\");\n    let is_operation = new abap.types.Structure({path: new abap.types.String(), method: new abap.types.String(), summary: new abap.types.String(), description: new abap.types.String(), operation_id: new abap.types.String(), deprecated: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), abap_name: new abap.types.String(), body_schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), body_schema_ref: new abap.types.String(), parameters: new abap.types.Table(new abap.types.Structure({id: new abap.types.String(), name: new abap.types.String(), abap_name: new abap.types.String(), in_: new abap.types.String(), description: new abap.types.String(), required: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_parameter\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), parameters_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false}), responses: new abap.types.Table(new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]}), responses_ref: new abap.types.Table(new abap.types.String(), {\"withHeader\":false})}, \"zif_oapi_specification_v3=>ty_operation\");\n    if (INPUT && INPUT.is_operation) {is_operation.set(INPUT.is_operation);}\n    let ls_response = new abap.types.Structure({code: new abap.types.String(), description: new abap.types.String(), content: new abap.types.Table(new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]})}, \"zif_oapi_specification_v3=>ty_response\");\n    let ls_content = new abap.types.Structure({type: new abap.types.String(), schema: new abap.types.ABAPObject({qualifiedName: \"ZIF_OAPI_SCHEMA\"}), schema_ref: new abap.types.String()}, \"zif_oapi_specification_v3=>ty_media_type\");\n    let lv_typename = new abap.types.String();\n    lv_typename.set(abap.operators.concat(new abap.types.Character({length: 4}).set('ret_'),is_operation.get().abap_name));\n    for (const unique62 of abap.statements.loop(is_operation.get().responses)) {\n      ls_response.set(unique62);\n      for (const unique63 of abap.statements.loop(ls_response.get().content)) {\n        ls_content.set(unique63);\n        rs_returning.get().type.set(abap.operators.concat(rs_returning.get().type,new abap.types.String().set(`           ${ls_response.get().code.get()} TYPE ${((await this.find_schema({iv_name: ls_content.get().schema_ref}))).get().abap_name.get()},\\n`)));\n      }\n    }\n    if (abap.compare.initial(rs_returning.get().type) === false) {\n      rs_returning.get().type.set(abap.operators.concat(new abap.types.String().set(`  TYPES: BEGIN OF ${lv_typename.get()},\\n`),abap.operators.concat(new abap.types.String().set(`${rs_returning.get().type.get()}`),new abap.types.String().set(`         END OF ${lv_typename.get()}.\\n`))));\n    }\n    for (const unique64 of abap.statements.loop(is_operation.get().responses)) {\n      ls_response.set(unique64);\n      for (const unique65 of abap.statements.loop(ls_response.get().content)) {\n        ls_content.set(unique65);\n        rs_returning.get().abap.set(abap.operators.concat(rs_returning.get().abap,new abap.types.String().set(`\\n    RETURNING\\n      VALUE(return) TYPE ${lv_typename.get()}`)));\n      }\n    }\n    return rs_returning;\n  }\n}\nabap.Classes['ZCL_OAPI_GENERATOR_V2'] = zcl_oapi_generator_v2;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://web/../output/zcl_oapi_generator_v2.clas.mjs?");

/***/ })

}]);
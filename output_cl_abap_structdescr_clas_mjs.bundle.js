"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb"] = self["webpackChunkweb"] || []).push([["output_cl_abap_structdescr_clas_mjs"],{

/***/ "../output/cl_abap_structdescr.clas.mjs":
/*!**********************************************!*\
  !*** ../output/cl_abap_structdescr.clas.mjs ***!
  \**********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cl_abap_structdescr\": () => (/* binding */ cl_abap_structdescr)\n/* harmony export */ });\nconst {cl_abap_complexdescr} = await __webpack_require__.e(/*! import() */ \"output_cl_abap_complexdescr_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cl_abap_complexdescr.clas.mjs */ \"../output/cl_abap_complexdescr.clas.mjs\"));\nconst {cx_root} = await __webpack_require__.e(/*! import() */ \"output_cx_root_clas_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"../output/cx_root.clas.mjs\"));\n// cl_abap_structdescr.clas.abap\nconst constant_0 = new abap.types.Integer().set(0);\nconst constant_1 = new abap.types.Integer().set(1);\nclass cl_abap_structdescr extends cl_abap_complexdescr {\n  async create(INPUT) {\n    return cl_abap_structdescr.create(INPUT);\n  }\n  static async create(INPUT) {\n    let ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_STRUCTDESCR\"});\n    let p_components = new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), type: new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"}), as_include: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), type_kind: new abap.types.Character({qualifiedName: \"cl_abap_structdescr=>type_kind\"})}, \"cl_abap_structdescr=>component\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    if (INPUT && INPUT.p_components) {p_components.set(INPUT.p_components);}\n    let p_strict = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    if (INPUT && INPUT.p_strict) {p_strict.set(INPUT.p_strict);}\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return ref;\n  }\n  async get_ddic_field_list() {\n    let rt_components = new abap.types.Table(new abap.types.Structure({tabname: new abap.types.Character({length: 30, qualifiedName: \"DFIES-TABNAME\"}), fieldname: new abap.types.Character({length: 30, qualifiedName: \"DFIES-FIELDNAME\"}), langu: new abap.types.Character({qualifiedName: \"DFIES-LANGU\"}), position: new abap.types.Character({qualifiedName: \"DFIES-POSITION\"}), offset: new abap.types.Character({qualifiedName: \"DFIES-OFFSET\"}), domname: new abap.types.Character({qualifiedName: \"DFIES-DOMNAME\"}), rollname: new abap.types.Character({qualifiedName: \"DFIES-ROLLNAME\"}), checktable: new abap.types.Character({qualifiedName: \"DFIES-CHECKTABLE\"}), leng: new abap.types.Character({qualifiedName: \"DFIES-LENG\"}), intlen: new abap.types.Character({qualifiedName: \"DFIES-INTLEN\"}), outputlen: new abap.types.Character({qualifiedName: \"DFIES-OUTPUTLEN\"}), decimals: new abap.types.Character({qualifiedName: \"DFIES-DECIMALS\"}), datatype: new abap.types.Character({qualifiedName: \"DFIES-DATATYPE\"}), inttype: new abap.types.Character({qualifiedName: \"DFIES-INTTYPE\"}), reftable: new abap.types.Character({qualifiedName: \"DFIES-REFTABLE\"}), reffield: new abap.types.Character({qualifiedName: \"DFIES-REFFIELD\"}), precfield: new abap.types.Character({qualifiedName: \"DFIES-PRECFIELD\"}), authorid: new abap.types.Character({qualifiedName: \"DFIES-AUTHORID\"}), memoryid: new abap.types.Character({qualifiedName: \"DFIES-MEMORYID\"}), logflag: new abap.types.Character({qualifiedName: \"DFIES-LOGFLAG\"}), mask: new abap.types.Character({qualifiedName: \"DFIES-MASK\"}), masklen: new abap.types.Character({qualifiedName: \"DFIES-MASKLEN\"}), convexit: new abap.types.Character({qualifiedName: \"DFIES-CONVEXIT\"}), headlen: new abap.types.Character({qualifiedName: \"DFIES-HEADLEN\"}), scrlen1: new abap.types.Character({qualifiedName: \"DFIES-SCRLEN1\"}), scrlen2: new abap.types.Character({qualifiedName: \"DFIES-SCRLEN2\"}), scrlen3: new abap.types.Character({qualifiedName: \"DFIES-SCRLEN3\"}), fieldtext: new abap.types.Character({qualifiedName: \"DFIES-FIELDTEXT\"}), reptext: new abap.types.Character({qualifiedName: \"DFIES-REPTEXT\"}), scrtext_s: new abap.types.Character({qualifiedName: \"DFIES-SCRTEXT_S\"}), scrtext_m: new abap.types.Character({qualifiedName: \"DFIES-SCRTEXT_M\"}), scrtext_l: new abap.types.Character({qualifiedName: \"DFIES-SCRTEXT_L\"}), keyflag: new abap.types.Character({qualifiedName: \"DFIES-KEYFLAG\"}), lowercase: new abap.types.Character({qualifiedName: \"DFIES-LOWERCASE\"}), mac: new abap.types.Character({qualifiedName: \"DFIES-MAC\"}), genkey: new abap.types.Character({qualifiedName: \"DFIES-GENKEY\"}), noforkey: new abap.types.Character({qualifiedName: \"DFIES-NOFORKEY\"}), valexi: new abap.types.Character({qualifiedName: \"DFIES-VALEXI\"}), noauthch: new abap.types.Character({qualifiedName: \"DFIES-NOAUTHCH\"}), sign: new abap.types.Character({qualifiedName: \"DFIES-SIGN\"}), dynpfld: new abap.types.Character({qualifiedName: \"DFIES-DYNPFLD\"}), f4availabl: new abap.types.Character({qualifiedName: \"DFIES-F4AVAILABL\"}), comptype: new abap.types.Character({qualifiedName: \"DFIES-COMPTYPE\"}), outputstyle: new abap.types.Character({qualifiedName: \"DFIES-OUTPUTSTYLE\"})}, \"DFIES\"), {\"withHeader\":false});\n    let lt_components = new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), type: new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"}), as_include: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), type_kind: new abap.types.Character({qualifiedName: \"cl_abap_structdescr=>type_kind\"})}, \"cl_abap_structdescr=>component\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    let ls_component = new abap.types.Structure({name: new abap.types.String(), type: new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"}), as_include: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), type_kind: new abap.types.Character({qualifiedName: \"cl_abap_structdescr=>type_kind\"})}, \"cl_abap_structdescr=>component\");\n    let ls_return = new abap.types.Structure({tabname: new abap.types.Character({length: 30, qualifiedName: \"DFIES-TABNAME\"}), fieldname: new abap.types.Character({length: 30, qualifiedName: \"DFIES-FIELDNAME\"}), langu: new abap.types.Character({qualifiedName: \"DFIES-LANGU\"}), position: new abap.types.Character({qualifiedName: \"DFIES-POSITION\"}), offset: new abap.types.Character({qualifiedName: \"DFIES-OFFSET\"}), domname: new abap.types.Character({qualifiedName: \"DFIES-DOMNAME\"}), rollname: new abap.types.Character({qualifiedName: \"DFIES-ROLLNAME\"}), checktable: new abap.types.Character({qualifiedName: \"DFIES-CHECKTABLE\"}), leng: new abap.types.Character({qualifiedName: \"DFIES-LENG\"}), intlen: new abap.types.Character({qualifiedName: \"DFIES-INTLEN\"}), outputlen: new abap.types.Character({qualifiedName: \"DFIES-OUTPUTLEN\"}), decimals: new abap.types.Character({qualifiedName: \"DFIES-DECIMALS\"}), datatype: new abap.types.Character({qualifiedName: \"DFIES-DATATYPE\"}), inttype: new abap.types.Character({qualifiedName: \"DFIES-INTTYPE\"}), reftable: new abap.types.Character({qualifiedName: \"DFIES-REFTABLE\"}), reffield: new abap.types.Character({qualifiedName: \"DFIES-REFFIELD\"}), precfield: new abap.types.Character({qualifiedName: \"DFIES-PRECFIELD\"}), authorid: new abap.types.Character({qualifiedName: \"DFIES-AUTHORID\"}), memoryid: new abap.types.Character({qualifiedName: \"DFIES-MEMORYID\"}), logflag: new abap.types.Character({qualifiedName: \"DFIES-LOGFLAG\"}), mask: new abap.types.Character({qualifiedName: \"DFIES-MASK\"}), masklen: new abap.types.Character({qualifiedName: \"DFIES-MASKLEN\"}), convexit: new abap.types.Character({qualifiedName: \"DFIES-CONVEXIT\"}), headlen: new abap.types.Character({qualifiedName: \"DFIES-HEADLEN\"}), scrlen1: new abap.types.Character({qualifiedName: \"DFIES-SCRLEN1\"}), scrlen2: new abap.types.Character({qualifiedName: \"DFIES-SCRLEN2\"}), scrlen3: new abap.types.Character({qualifiedName: \"DFIES-SCRLEN3\"}), fieldtext: new abap.types.Character({qualifiedName: \"DFIES-FIELDTEXT\"}), reptext: new abap.types.Character({qualifiedName: \"DFIES-REPTEXT\"}), scrtext_s: new abap.types.Character({qualifiedName: \"DFIES-SCRTEXT_S\"}), scrtext_m: new abap.types.Character({qualifiedName: \"DFIES-SCRTEXT_M\"}), scrtext_l: new abap.types.Character({qualifiedName: \"DFIES-SCRTEXT_L\"}), keyflag: new abap.types.Character({qualifiedName: \"DFIES-KEYFLAG\"}), lowercase: new abap.types.Character({qualifiedName: \"DFIES-LOWERCASE\"}), mac: new abap.types.Character({qualifiedName: \"DFIES-MAC\"}), genkey: new abap.types.Character({qualifiedName: \"DFIES-GENKEY\"}), noforkey: new abap.types.Character({qualifiedName: \"DFIES-NOFORKEY\"}), valexi: new abap.types.Character({qualifiedName: \"DFIES-VALEXI\"}), noauthch: new abap.types.Character({qualifiedName: \"DFIES-NOAUTHCH\"}), sign: new abap.types.Character({qualifiedName: \"DFIES-SIGN\"}), dynpfld: new abap.types.Character({qualifiedName: \"DFIES-DYNPFLD\"}), f4availabl: new abap.types.Character({qualifiedName: \"DFIES-F4AVAILABL\"}), comptype: new abap.types.Character({qualifiedName: \"DFIES-COMPTYPE\"}), outputstyle: new abap.types.Character({qualifiedName: \"DFIES-OUTPUTSTYLE\"})}, \"DFIES\");\n    let lv_name = new abap.types.String();\n    let lv_keyfield = new abap.types.String();\n    let fs_component_ = new abap.types.FieldSymbol(new abap.types.Structure({tabname: new abap.types.Character({length: 30, qualifiedName: \"DFIES-TABNAME\"}), fieldname: new abap.types.Character({length: 30, qualifiedName: \"DFIES-FIELDNAME\"}), langu: new abap.types.Character({qualifiedName: \"DFIES-LANGU\"}), position: new abap.types.Character({qualifiedName: \"DFIES-POSITION\"}), offset: new abap.types.Character({qualifiedName: \"DFIES-OFFSET\"}), domname: new abap.types.Character({qualifiedName: \"DFIES-DOMNAME\"}), rollname: new abap.types.Character({qualifiedName: \"DFIES-ROLLNAME\"}), checktable: new abap.types.Character({qualifiedName: \"DFIES-CHECKTABLE\"}), leng: new abap.types.Character({qualifiedName: \"DFIES-LENG\"}), intlen: new abap.types.Character({qualifiedName: \"DFIES-INTLEN\"}), outputlen: new abap.types.Character({qualifiedName: \"DFIES-OUTPUTLEN\"}), decimals: new abap.types.Character({qualifiedName: \"DFIES-DECIMALS\"}), datatype: new abap.types.Character({qualifiedName: \"DFIES-DATATYPE\"}), inttype: new abap.types.Character({qualifiedName: \"DFIES-INTTYPE\"}), reftable: new abap.types.Character({qualifiedName: \"DFIES-REFTABLE\"}), reffield: new abap.types.Character({qualifiedName: \"DFIES-REFFIELD\"}), precfield: new abap.types.Character({qualifiedName: \"DFIES-PRECFIELD\"}), authorid: new abap.types.Character({qualifiedName: \"DFIES-AUTHORID\"}), memoryid: new abap.types.Character({qualifiedName: \"DFIES-MEMORYID\"}), logflag: new abap.types.Character({qualifiedName: \"DFIES-LOGFLAG\"}), mask: new abap.types.Character({qualifiedName: \"DFIES-MASK\"}), masklen: new abap.types.Character({qualifiedName: \"DFIES-MASKLEN\"}), convexit: new abap.types.Character({qualifiedName: \"DFIES-CONVEXIT\"}), headlen: new abap.types.Character({qualifiedName: \"DFIES-HEADLEN\"}), scrlen1: new abap.types.Character({qualifiedName: \"DFIES-SCRLEN1\"}), scrlen2: new abap.types.Character({qualifiedName: \"DFIES-SCRLEN2\"}), scrlen3: new abap.types.Character({qualifiedName: \"DFIES-SCRLEN3\"}), fieldtext: new abap.types.Character({qualifiedName: \"DFIES-FIELDTEXT\"}), reptext: new abap.types.Character({qualifiedName: \"DFIES-REPTEXT\"}), scrtext_s: new abap.types.Character({qualifiedName: \"DFIES-SCRTEXT_S\"}), scrtext_m: new abap.types.Character({qualifiedName: \"DFIES-SCRTEXT_M\"}), scrtext_l: new abap.types.Character({qualifiedName: \"DFIES-SCRTEXT_L\"}), keyflag: new abap.types.Character({qualifiedName: \"DFIES-KEYFLAG\"}), lowercase: new abap.types.Character({qualifiedName: \"DFIES-LOWERCASE\"}), mac: new abap.types.Character({qualifiedName: \"DFIES-MAC\"}), genkey: new abap.types.Character({qualifiedName: \"DFIES-GENKEY\"}), noforkey: new abap.types.Character({qualifiedName: \"DFIES-NOFORKEY\"}), valexi: new abap.types.Character({qualifiedName: \"DFIES-VALEXI\"}), noauthch: new abap.types.Character({qualifiedName: \"DFIES-NOAUTHCH\"}), sign: new abap.types.Character({qualifiedName: \"DFIES-SIGN\"}), dynpfld: new abap.types.Character({qualifiedName: \"DFIES-DYNPFLD\"}), f4availabl: new abap.types.Character({qualifiedName: \"DFIES-F4AVAILABL\"}), comptype: new abap.types.Character({qualifiedName: \"DFIES-COMPTYPE\"}), outputstyle: new abap.types.Character({qualifiedName: \"DFIES-OUTPUTSTYLE\"})}, \"DFIES\"));\n    lt_components.set((await this.get_components()));\n    abap.statements.assert(abap.compare.cp(this.absolute_name, new abap.types.Character({length: 7}).set('+TYPE=*')));\n    lv_name.set(this.absolute_name.getOffset({offset: 6}));\n    for (const unique106 of abap.statements.loop(lt_components)) {\n      ls_component.set(unique106);\n      abap.statements.clear(ls_return);\n      ls_return.get().tabname.set(lv_name);\n      ls_return.get().fieldname.set(ls_component.get().name);\n      abap.statements.append({source: ls_return, target: rt_components});\n    }\n    for (const keyfield of abap.DDIC[lv_name.get()]?.keyFields || [] ) {\n      lv_keyfield.set(keyfield);\n      abap.statements.readTable(rt_components,{assigning: fs_component_,withKey: (i) => {return abap.compare.eq(i.fieldname, lv_keyfield);}});\n      abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, constant_0));\n      fs_component_.get().keyflag.set(abap.builtin.abap_true);\n    }\n    return rt_components;\n  }\n  async is_ddic_type() {\n    let bool = new abap.types.Character({qualifiedName: \"ABAP_BOOL\"});\n    abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    return bool;\n  }\n  async constructor_(INPUT) {\n    await super.constructor_(INPUT);\n    this.me = new abap.types.ABAPObject();\n    this.me.set(this);\n    this.components = new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), type: new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"}), as_include: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), type_kind: new abap.types.Character({qualifiedName: \"cl_abap_structdescr=>type_kind\"})}, \"cl_abap_structdescr=>component\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    this.struct_kind = new abap.types.Character({qualifiedName: \"abap_structkind\"});\n    let data = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.data) {data = INPUT.data;}\n    let lv_name = new abap.types.String();\n    let ls_component = new abap.types.Structure({name: new abap.types.String(), type: new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"}), as_include: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), type_kind: new abap.types.Character({qualifiedName: \"cl_abap_structdescr=>type_kind\"})}, \"cl_abap_structdescr=>component\");\n    let fs_fs_ = new abap.types.FieldSymbol(new abap.types.Character({length: 4}));\n    for (const name of Object.keys(INPUT.data.value)) {\n        lv_name.set(name.toUpperCase());\n      abap.statements.clear(ls_component);\n      ls_component.get().name.set(lv_name);\n      abap.statements.assign({component: lv_name, target: fs_fs_, source: data});\n      ls_component.get().type.set((await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: fs_fs_})));\n      abap.statements.append({source: ls_component, target: this.components});\n    }\n    return this;\n  }\n  async get_components() {\n    let rt_components = new abap.types.Table(new abap.types.Structure({name: new abap.types.String(), type: new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"}), as_include: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), type_kind: new abap.types.Character({qualifiedName: \"cl_abap_structdescr=>type_kind\"})}, \"cl_abap_structdescr=>component\"), {\"withHeader\":false,\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]});\n    rt_components.set(this.components);\n    return rt_components;\n  }\n  async get_component_type(INPUT) {\n    let p_descr_ref = new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_DATADESCR\"});\n    let p_name = new abap.types.Character({length: 4});\n    if (INPUT && INPUT.p_name) {p_name = INPUT.p_name;}\n    let line = new abap.types.Structure({name: new abap.types.String(), type: new abap.types.ABAPObject({qualifiedName: \"CL_ABAP_TYPEDESCR\"}), as_include: new abap.types.Character({qualifiedName: \"ABAP_BOOL\"}), type_kind: new abap.types.Character({qualifiedName: \"cl_abap_structdescr=>type_kind\"})}, \"cl_abap_structdescr=>component\");\n    abap.statements.readTable(this.components,{into: line,withKey: (i) => {return abap.compare.eq(i.name, p_name);}});\n    if (abap.compare.ne(abap.builtin.sy.get().subrc, constant_0)) {\n      abap.statements.assert(abap.compare.eq(constant_1, new abap.types.Character({length: 4}).set('todo')));\n    } else {\n      await abap.statements.cast(p_descr_ref, line.get().type);\n    }\n    return p_descr_ref;\n  }\n}\nabap.Classes['CL_ABAP_STRUCTDESCR'] = cl_abap_structdescr;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://web/../output/cl_abap_structdescr.clas.mjs?");

/***/ })

}]);